
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

- Project '/oscar/home/akhann16/code/net-ergm-v4plus' loaded. [renv 1.0.7]
- The project is out-of-sync -- use `renv::status()` for details.
> # Summarize simulated statistics across multiple networks
> 
> 
> rm(list = ls())
> 
> # Initiate environment ------------------------------
> 
> library(renv)

Attaching package: ‘renv’

The following objects are masked from ‘package:stats’:

    embed, update

The following objects are masked from ‘package:utils’:

    history, upgrade

The following objects are masked from ‘package:base’:

    autoload, load, remove, use

> renv::activate()
> 
> .libPaths()
[1] "/oscar/home/akhann16/code/net-ergm-v4plus/renv/library/linux-rhel-9.2/R-4.4/x86_64-pc-linux-gnu"
[2] "/oscar/home/akhann16/.cache/R/renv/sandbox/linux-rhel-9.2/R-4.4/x86_64-pc-linux-gnu/c8a2d945"   
> 
> 
> # Libraries ----------
> 
> library(network)

‘network’ 1.18.2 (2023-12-04), part of the Statnet Project
* ‘news(package="network")’ for changes since last version
* ‘citation("network")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

> library(ergm)

‘ergm’ 4.6.0 (2023-12-17), part of the Statnet Project
* ‘news(package="ergm")’ for changes since last version
* ‘citation("ergm")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

‘ergm’ 4 is a major update that introduces some backwards-incompatible
changes. Please type ‘news(package="ergm")’ for a list of major
changes.

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ergm.userterms)
Loading required package: statnet.common

Attaching package: ‘statnet.common’

The following objects are masked from ‘package:base’:

    attr, order


‘ergm.userterms’ 3.1.1 (2020-02-01), part of the Statnet Project
* ‘news(package="ergm.userterms")’ for changes since last version
* ‘citation("ergm.userterms")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

> library(here)
here() starts at /oscar/home/akhann16/code/net-ergm-v4plus
> library(ggplot2)
> 
> 
> # Data ----------
> 
> ## fit output
>     load(here("simulate-from-ergms", "out", 
+       "stepwise-refactored-checkpointing-data-dated-2025-jan23.RData"
+       )
+   )
> 
> ## input params
>   data_objects <- readRDS(here("fit-ergms", "out", "processed_data.rds"))
>   names(data_objects)
 [1] "data"                    "n0"                     
 [3] "edges_only_net"          "tgt.old.pctyoung"       
 [5] "tgt.young.pctold"        "tgt.young.pctyoung"     
 [7] "edges_target"            "tgt.female.pctmale"     
 [9] "tgt.male.pctfemale"      "tgt.male.pctmale"       
[11] "target_race_num"         "indegree_data"          
[13] "outdegree_data"          "dist_nedge_distribution"
> 
> ## confirm which run
>   run_label
[1] "stepwise-refactored-checkpointing-data-dated-2025-jan23"
> 
> # Compute summaries and IQRs ----------
> 
> n <- network.size(sim_results[[1]])
> n_edges <- target_stats_edges
> 
> 
> ## edges
>   ### simulated
>   edgecount.sim.data <- (unlist(lapply(
+     sim_results,
+     function(x) network.edgecount(x)
+   ))) # edge count summary
> 
>   mean(edgecount.sim.data)
[1] 24317.78
>   quantile(edgecount.sim.data, probs = c(2.5 / 100, 97.5 / 100))
    2.5%    97.5% 
24002.70 24588.67 
> 
>   ### target
>   edges_target
[1] 22959.93
> 
> 
> ## outdegree
>   ### simulated
>   summary(outdeg0)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  18586   18702   18756   18760   18810   18972 
>   quantile(outdeg0, probs = c(2.5 / 100, 97.5 / 100))
    2.5%    97.5% 
18630.43 18916.35 
>   summary(outdeg1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   6526    6688    6740    6737    6781    6900 
>   quantile(outdeg1, probs = c(2.5 / 100, 97.5 / 100))
   2.5%   97.5% 
6594.00 6890.05 
> 
>   outdeg.gr.0.1 <- n - (sum(target_stats_outdeg))
>   summary(outdeg.gr.0.1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   6146    6146    6146    6146    6146    6146 
>   quantile(outdeg.gr.0.1, probs = c(2.5 / 100, 97.5 / 100))
  2.5%  97.5% 
6145.5 6145.5 
> 
> 
>   ### target
>   target_stats_outdeg
[1] 19387.2  6469.3
> 
> 
> 
> ## indegree
>   ### simulated
>   summary(indeg0)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  20199   20316   20372   20373   20426   20562 
>   quantile(indeg0, probs = c(2.5 / 100, 97.5 / 100))
   2.5%   97.5% 
20245.9 20506.1 
>   summary(indeg1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   4656    4755    4816    4814    4853    5004 
>   quantile(indeg1, probs = c(2.5 / 100, 97.5 / 100))
   2.5%   97.5% 
4681.65 4956.10 
> 
>   indeg.gr.0.1 <- n - (sum(target_stats_indeg))
>   summary(indeg.gr.0.1)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   4836    4836    4836    4836    4836    4836 
>   quantile(indeg.gr.0.1, probs = c(2.5 / 100, 97.5 / 100))
   2.5%   97.5% 
4835.83 4835.83 
> 
>   ### target
>   target_stats_indeg
[1] 20666.67  6499.50
> 
> ## race
>   ### simulated
>   sim.race.num <- lapply(nsim.vec, function(x) summary(sim_results[[x]] ~ nodemix("race.num")))
>   #summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.1.1"])))
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.2.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2275    2362    2388    2390    2419    2517 
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.3.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2642    2735    2766    2763    2796    2885 
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.4.1"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   3709    3820    3854    3860    3903    4052 
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.1.2"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1061    1118    1140    1139    1156    1251 
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.2.2"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   5499    5681    5728    5728    5776    5905 
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.3.2"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  827.0   872.5   895.5   893.5   911.5   960.0 
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.4.2"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1956    2014    2042    2043    2072    2194 
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.1.3"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  632.0   666.8   686.0   685.7   703.0   746.0 
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.2.3"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  349.0   385.8   399.0   399.1   415.0   442.0 
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.3.3"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   2456    2566    2606    2599    2633    2689 
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.4.3"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  880.0   939.5   956.0   959.3   982.0  1028.0 
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.1.4"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   3.00    9.00   11.00   11.67   14.00   20.00 
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.2.4"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  12.00   25.00   28.50   28.45   31.25   41.00 
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.3.4"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   4.00    8.00   10.00   10.34   12.00   23.00 
>   summary(unlist(lapply(sim.race.num, function(x) x["mix.race.num.4.4"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  61.00   78.00   84.50   84.59   90.00  105.00 
> 
>   #quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.1.1"])), probs = c(2.5 / 100, 97.5 / 100))
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.2.1"])), probs = c(2.5 / 100, 97.5 / 100))
   2.5%   97.5% 
2300.70 2476.05 
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.3.1"])), probs = c(2.5 / 100, 97.5 / 100))
   2.5%   97.5% 
2665.75 2856.15 
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.4.1"])), probs = c(2.5 / 100, 97.5 / 100))
  2.5%  97.5% 
3748.0 3952.2 
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.1.2"])), probs = c(2.5 / 100, 97.5 / 100))
    2.5%    97.5% 
1074.950 1211.825 
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.2.2"])), probs = c(2.5 / 100, 97.5 / 100))
    2.5%    97.5% 
5596.925 5846.925 
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.3.2"])), probs = c(2.5 / 100, 97.5 / 100))
  2.5%  97.5% 
838.85 947.10 
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.4.2"])), probs = c(2.5 / 100, 97.5 / 100))
    2.5%    97.5% 
1975.425 2129.525 
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.1.3"])), probs = c(2.5 / 100, 97.5 / 100))
   2.5%   97.5% 
637.475 738.575 
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.2.3"])), probs = c(2.5 / 100, 97.5 / 100))
   2.5%   97.5% 
362.000 435.525 
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.3.3"])), probs = c(2.5 / 100, 97.5 / 100))
    2.5%    97.5% 
2499.675 2677.200 
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.4.3"])), probs = c(2.5 / 100, 97.5 / 100))
    2.5%    97.5% 
 890.800 1020.675 
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.1.4"])), probs = c(2.5 / 100, 97.5 / 100))
 2.5% 97.5% 
    5    19 
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.2.4"])), probs = c(2.5 / 100, 97.5 / 100))
  2.5%  97.5% 
18.000 39.525 
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.3.4"])), probs = c(2.5 / 100, 97.5 / 100))
  2.5%  97.5% 
 4.475 18.525 
>   quantile(unlist(lapply(sim.race.num, function(x) x["mix.race.num.4.4"])), probs = c(2.5 / 100, 97.5 / 100))
   2.5%   97.5% 
 69.425 103.000 
> 
> ### target
> target_race_mixing <- target_race_num
> 
> ## sex
>   ### simulated
>   sim.sex <- lapply(nsim.vec, function(x) summary(sim_results[[x]] ~ nodemix("sex")))
>   #summary(unlist(lapply(sim.sex, function(x) x["mix.sex.F.F"])))
>   summary(unlist(lapply(sim.sex, function(x) x["mix.sex.M.F"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   5937    6068    6118    6120    6176    6368 
>   summary(unlist(lapply(sim.sex, function(x) x["mix.sex.F.M"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   4219    4340    4384    4380    4418    4531 
>   summary(unlist(lapply(sim.sex, function(x) x["mix.sex.M.M"])))
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   9174    9390    9466    9464    9535    9715 
> 
>   #quantile(unlist(lapply(sim.sex, function(x) x["mix.sex.F.F"])), probs = c(2.5 / 100, 97.5 / 100))
>   quantile(unlist(lapply(sim.sex, function(x) x["mix.sex.M.F"])), probs = c(2.5 / 100, 97.5 / 100))
    2.5%    97.5% 
5985.175 6269.200 
>   quantile(unlist(lapply(sim.sex, function(x) x["mix.sex.F.M"])), probs = c(2.5 / 100, 97.5 / 100))
    2.5%    97.5% 
4232.425 4512.525 
>   quantile(unlist(lapply(sim.sex, function(x) x["mix.sex.M.M"])), probs = c(2.5 / 100, 97.5 / 100))
    2.5%    97.5% 
9236.125 9661.600 
> 
>   ### 
>   target_sex_mixing <- target_sex_mixing
Error: object 'target_sex_mixing' not found
Execution halted
