
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

- Project '/oscar/home/akhann16/code/net-ergm-v4plus' loaded. [renv 1.0.7]
> # Simulate network (n=32K) from ERGM fit 
> # parameterized with meta data  
> 
> 
> rm(list=ls())
> 
> # Initiate environment ------------------------------
> 
> library(renv)

Attaching package: ‘renv’

The following objects are masked from ‘package:stats’:

    embed, update

The following objects are masked from ‘package:utils’:

    history, upgrade

The following objects are masked from ‘package:base’:

    autoload, load, remove, use

> renv::activate()
> 
> .libPaths()
[1] "/oscar/home/akhann16/code/net-ergm-v4plus/renv/library/linux-rhel-9.2/R-4.4/x86_64-pc-linux-gnu"
[2] "/oscar/home/akhann16/.cache/R/renv/sandbox/linux-rhel-9.2/R-4.4/x86_64-pc-linux-gnu/c8a2d945"   
> 
> 
> # Libraries ----------
> 
> library(network)

‘network’ 1.18.2 (2023-12-04), part of the Statnet Project
* ‘news(package="network")’ for changes since last version
* ‘citation("network")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

> library(ergm)

‘ergm’ 4.6.0 (2023-12-17), part of the Statnet Project
* ‘news(package="ergm")’ for changes since last version
* ‘citation("ergm")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

‘ergm’ 4 is a major update that introduces some backwards-incompatible
changes. Please type ‘news(package="ergm")’ for a list of major
changes.

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ergm.userterms)
Loading required package: statnet.common

Attaching package: ‘statnet.common’

The following objects are masked from ‘package:base’:

    attr, order


‘ergm.userterms’ 3.1.1 (2020-02-01), part of the Statnet Project
* ‘news(package="ergm.userterms")’ for changes since last version
* ‘citation("ergm.userterms")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

> library(here)
here() starts at /oscar/home/akhann16/code/net-ergm-v4plus
> 
> 
> # Data ----------
> 
> load(here("fit-ergms", "out", "updated-with-oct12-2024-synthpop-ergmv4-6-all-plos1-mcmc-int1e5-samp1e6-hotelling.RData"))
> 
> # Model summary
> summary(fit.metadata.mixing)
Call:
ergm(formula = n0 ~ edges + nodemix("sex", levels2 = -1) + nodemix("young", 
    levels2 = -1) + nodemix("race.num", levels2 = -1) + idegree(indeg.terms) + 
    odegree(deg.terms) + dist(dist.terms), target.stats = c(edges_target, 
    c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale), 
    c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung), 
    c(target.b.w, target.h.w, target.o.w, target.w.b, target.b.b, 
        target.h.b, target.o.b, target.w.h, target.b.h, target.h.h, 
        target.o.h, target.w.o, target.b.o, target.h.o, target.o.o), 
    c(negbin_inedges$n_nodes[c(indeg.terms + 1)]), c(outedges$n_nodes[c(deg.terms + 
        1)]), c(dist.nedge.distribution[dist.terms])), eval.loglik = FALSE, 
    control = control.ergm(MCMLE.maxit = 500, main.method = c("Stochastic-Approximation"), 
        MCMC.interval = 1e+05, MCMC.samplesize = 1e+06, MCMLE.termination = "Hotelling", 
        MCMC.effectiveSize = NULL, SAN = control.san(SAN.maxit = 500, 
            SAN.nsteps = 1e+08)))

Stochastic Approximation Maximum Likelihood Results:

                   Estimate Std. Error MCMC %  z value Pr(>|z|)    
edges            -6.5180728  0.0504545      0 -129.187  < 1e-04 ***
mix.sex.M.F       0.0005209  0.0393258      0    0.013 0.989432    
mix.sex.F.M      -0.8889943  0.0374658      0  -23.728  < 1e-04 ***
mix.sex.M.M      -0.9309247  0.0356913      0  -26.083  < 1e-04 ***
mix.young.1.0    -1.0119148  0.0286818      0  -35.281  < 1e-04 ***
mix.young.0.1    -1.1346603  0.0393804      0  -28.813  < 1e-04 ***
mix.young.1.1    -0.0990550  0.0303915      0   -3.259 0.001117 ** 
mix.race.num.2.1 -2.4892882  0.0493042      0  -50.488  < 1e-04 ***
mix.race.num.3.1 -1.2482292  0.0470516      0  -26.529  < 1e-04 ***
mix.race.num.4.1 -0.4375276  0.0715387      0   -6.116  < 1e-04 ***
mix.race.num.1.2 -1.2721832  0.0442999      0  -28.718  < 1e-04 ***
mix.race.num.2.2 -0.6876237  0.0276941      0  -24.829  < 1e-04 ***
mix.race.num.3.2 -1.5179444  0.0587835      0  -25.823  < 1e-04 ***
mix.race.num.4.2 -1.9392704  0.1437543      0  -13.490  < 1e-04 ***
mix.race.num.1.3 -1.6084365  0.0428216      0  -37.561  < 1e-04 ***
mix.race.num.2.3 -1.7843440  0.0540157      0  -33.034  < 1e-04 ***
mix.race.num.3.3 -0.0720949  0.0330021      0   -2.185 0.028922 *  
mix.race.num.4.3  1.5552827  0.1370214      0   11.351  < 1e-04 ***
mix.race.num.1.4 -0.5202935  0.0558917      0   -9.309  < 1e-04 ***
mix.race.num.2.4 -2.0529042  0.0949380      0  -21.624  < 1e-04 ***
mix.race.num.3.4  0.1543115  0.0845440      0    1.825 0.067968 .  
mix.race.num.4.4  1.7816331  0.1262643      0   14.110  < 1e-04 ***
idegree0          4.0512035  0.0550255      0   73.624  < 1e-04 ***
idegree1          1.4348323  0.0474342      0   30.249  < 1e-04 ***
odegree0          0.3622174  0.1086732      0    3.333 0.000859 ***
odegree1         -1.0362247  0.0844821      0  -12.266  < 1e-04 ***
odegree2         -1.1778796  0.0652860      0  -18.042  < 1e-04 ***
odegree3         -1.1086151  0.0514240      0  -21.558  < 1e-04 ***
dist1             6.3427511  0.0203317      3  311.963  < 1e-04 ***
dist2             1.5585888  0.0225526      1   69.109  < 1e-04 ***
dist3            -1.1199913  0.0200675      0  -55.811  < 1e-04 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Log-likelihood was not estimated for this fit. To get deviances, AIC, and/or BIC, use ‘*fit* <-logLik(*fit*, add=TRUE)’ to add it to the object or rerun this function with eval.loglik=TRUE.
> 
> 
> # Simulate 100 networks ----------
> 
> nsim.vec <- 1:100
> 
> sim_results <- as.list(nsim.vec)
> set.seed(Sys.time())
> 
> for (iter in 1:length(nsim.vec)){
+   sim_results[[iter]] <- simulate(fit.metadata.mixing,
+                                   nsim=1
+                                   )
+ }
> 
> 
> #  Investigate netstats on 100 networks ----------
> 
> ## edgecount
> ecount <- unlist(lapply(sim_results, network.edgecount))
> summary(ecount)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
 105779  106881  107278  107273  107560  108962 
> 
> mean_edges <- mean(ecount)
> range_edges <- range(ecount)
> target_stats_edges <- edges_target
> 
> comparison_df_edges <- data.frame(
+   Parameter = c("edges"),
+   Mean = mean_edges,
+   Range_Min = range_edges[seq(1, length(range_edges), 2)],
+   Range_Max = range_edges[seq(2, length(range_edges), 2)],
+   Target = target_stats_edges
+ )
> 
> comparison_df_edges
  Parameter     Mean Range_Min Range_Max Target
1     edges 107272.8    105779    108962  24652
> 
> ## outdegree
> outdeg0 <- unlist(lapply(sim_results, 
+                         function (x) summary(x ~ odegree(0))
+                         ))
> outdeg1 <- unlist(lapply(sim_results, 
+                          function (x) summary(x ~ odegree(1))
+ ))
> outdeg2 <- unlist(lapply(sim_results, 
+                          function (x) summary(x ~ odegree(2))
+ ))
> outdeg3 <- unlist(lapply(sim_results, 
+                          function (x) summary(x ~ odegree(3))
+ ))
> outdeg4 <- unlist(lapply(sim_results, 
+                          function (x) summary(x ~ odegree(4))
+ ))
> 
> 
> mean_outdeg <- c(mean(outdeg0), mean(outdeg1), mean(outdeg2), mean(outdeg3))
> range_outdeg <- c(range(outdeg0), range(outdeg1), range(outdeg2), range(outdeg3))
> 
> target_stats_outdeg <- outedges$n_nodes[1:4] #target
> 
> comparison_df_outdeg <- data.frame(
+   Parameter = c("outdeg0", "outdeg1", "outdeg2", "outdeg3"),
+   Mean = mean_outdeg,
+   Range_Min = range_outdeg[seq(1, length(range_outdeg), 2)],
+   Range_Max = range_outdeg[seq(2, length(range_outdeg), 2)],
+   Target = target_stats_outdeg
+ )
> 
> comparison_df_outdeg
  Parameter    Mean Range_Min Range_Max    Target
1   outdeg0 6090.68      5938      6243 20377.670
2   outdeg1 3424.13      3303      3554  5368.025
3   outdeg2 3406.14      3248      3534  2578.179
4   outdeg3 2928.36      2769      3077  1424.625
> 
> ## indegree
> indeg0 <- unlist(lapply(sim_results, 
+                          function (x) summary(x ~ idegree(0))
+ ))
> indeg1 <- unlist(lapply(sim_results, 
+                          function (x) summary(x ~ idegree(1))
+ ))
> indeg2 <- unlist(lapply(sim_results, 
+                          function (x) summary(x ~ idegree(2))
+ ))
> indeg3 <- unlist(lapply(sim_results, 
+                          function (x) summary(x ~ idegree(3))
+ ))
> indeg4 <- unlist(lapply(sim_results, 
+                          function (x) summary(x ~ idegree(4))
+ ))
> 
> 
> c(mean(indeg0), mean(indeg1), mean(indeg2), mean(indeg3), mean(indeg4))
[1] 11644.16  3467.63  1636.31  2090.01  2284.05
> inedges$n_nodes[1:5]
[1] 23163.897  4160.120  1896.771  1039.539   617.605
> 
> 
> mean_indeg <- c(mean(indeg0), mean(indeg1))
> range_indeg <- c(range(indeg0), range(indeg1))
> 
> target_stats_indeg <- inedges$n_nodes[1:2] #target
> 
> comparison_df_indeg <- data.frame(
+   Parameter = c("indeg0", "indeg1", "indeg2", "indeg3"),
+   Mean = mean_indeg,
+   Range_Min = range_indeg[seq(1, length(range_indeg), 2)],
+   Range_Max = range_indeg[seq(2, length(range_indeg), 2)],
+   Target = target_stats_indeg
+ )
> 
> comparison_df_indeg
  Parameter     Mean Range_Min Range_Max   Target
1    indeg0 11644.16     11510     11810 23163.90
2    indeg1  3467.63      3322      3635  4160.12
3    indeg2 11644.16     11510     11810 23163.90
4    indeg3  3467.63      3322      3635  4160.12
> 
> ## nodemix(race.num)
> race.num <- unlist(lapply(sim_results, 
+                          function (x) summary(x ~ nodemix("race.num"))
+ ))
> 
> summary(sim_results[[1]] ~ nodemix("race.num"))
mix.race.num.2.1 mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 
            2953             7998             3192             8628 
mix.race.num.2.2 mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 
           13551             2932              416             4494 
mix.race.num.2.3 mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 
            1736             7453             3212             3378 
mix.race.num.2.4 mix.race.num.3.4 mix.race.num.4.4 
             505             2163             1110 
> round(
+   c(target.w.w, target.b.w, target.h.w, target.o.w,
+     target.w.b, target.b.b, target.h.b, target.o.b,
+     target.w.h, target.b.h, target.h.h, target.o.h,
+     target.w.o, target.b.o, target.h.o, target.o.o),
+   0
+ )
 [1] 5489  752  902  301 1023 8491  614  102 1113  795 3286  106  477  233  244
[16]  155
> 
> 
> ## nodemix(sex)
> gender <- unlist(lapply(sim_results, 
+                           function (x) summary(x ~ nodemix("sex"))
+ ))
> 
> round(c(tgt.female.pctfemale, tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale), 0)
[1] 2196 7488 6778 7643
> 
> ## nodemix(young)
> young <- unlist(lapply(sim_results, 
+                         function (x) summary(x ~ nodemix("young"))
+ )) 
> 
> #summary(sim_results[[10]] ~ nodemix("young"))
> round(c(tgt.old.pctold, tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung))
[1] 19081  3106   986  1479
> 
> save.image(here("simulate-from-ergms", "out", "sim-updated-with-oct12-2024-synthpop-ergmv4-6-all-plosone-terms-increase-mcmc-samplesize-1e6-int1e5-hotelling.RData"))
> 
> proc.time()
    user   system  elapsed 
2153.995   66.560 2234.762 
