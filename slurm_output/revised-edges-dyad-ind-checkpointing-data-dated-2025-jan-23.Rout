
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

- Project '/oscar/home/akhann16/code/net-ergm-v4plus' loaded. [renv 1.0.7]
> # Analyze synthetic dataset with 32K nodes 
> 
> 
> # Fit ERGM with 5 dyadic independent terms
> 
> rm(list=ls())
> 
> # Label and outputs for this run
> run_label <- "stepwise-refactored-checkpointing-data-dated-2025-jan23" #set manually to ensure intentional updates
> 
> # Activate R environment ----------
> 
> library(renv)

Attaching package: ‘renv’

The following objects are masked from ‘package:stats’:

    embed, update

The following objects are masked from ‘package:utils’:

    history, upgrade

The following objects are masked from ‘package:base’:

    autoload, load, remove, use

> renv::activate()
> 
> 
> # Libraries ----------
> 
> library(network)

‘network’ 1.18.2 (2023-12-04), part of the Statnet Project
* ‘news(package="network")’ for changes since last version
* ‘citation("network")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

> library(ergm)

‘ergm’ 4.6.0 (2023-12-17), part of the Statnet Project
* ‘news(package="ergm")’ for changes since last version
* ‘citation("ergm")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

‘ergm’ 4 is a major update that introduces some backwards-incompatible
changes. Please type ‘news(package="ergm")’ for a list of major
changes.

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ergm.userterms)
Loading required package: statnet.common

Attaching package: ‘statnet.common’

The following objects are masked from ‘package:base’:

    attr, order


‘ergm.userterms’ 3.1.1 (2020-02-01), part of the Statnet Project
* ‘news(package="ergm.userterms")’ for changes since last version
* ‘citation("ergm.userterms")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

> library(here)
here() starts at /oscar/home/akhann16/code/net-ergm-v4plus
> 
> 
> # Create output directory --------- 
> out_dir <- here("fit-ergms", "out", run_label)
> if (!dir.exists(out_dir)) dir.create(out_dir, recursive = FALSE)
> 
> 
> # Load data objects ----------
> 
> data_objects <- readRDS(here("fit-ergms", "out", "processed_data.rds"))
> names(data_objects)
 [1] "data"                    "n0"                     
 [3] "edges_only_net"          "tgt.old.pctyoung"       
 [5] "tgt.young.pctold"        "tgt.young.pctyoung"     
 [7] "edges_target"            "tgt.female.pctmale"     
 [9] "tgt.male.pctfemale"      "tgt.male.pctmale"       
[11] "target_race_num"         "indegree_data"          
[13] "outdegree_data"          "dist_nedge_distribution"
> 
>  data <- data_objects$data
>  n0 <- data_objects$n0                     
>  edges_only_net <- data_objects$edges_only_net 
>  edges_target <- data_objects$edges_target           
>  tgt.female.pctmale <- data_objects$tgt.female.pctmale      
>  tgt.male.pctfemale <- data_objects$tgt.male.pctfemale
>  tgt.male.pctmale <- data_objects$tgt.male.pctmale    
>  tgt.old.pctyoung <- data_objects$tgt.old.pctyoung
>  tgt.young.pctold <- data_objects$tgt.young.pctold
>  tgt.young.pctyoung <- data_objects$tgt.young.pctyoung
>  indegree_data <- data_objects$indegree_data   
>  target_race_num <- data_objects$target_race_num      
>  outdegree_data <- data_objects$outdegree_data
>  dist.nedge.distribution <- data_objects$dist_nedge_distribution
> 
> inedges_target <- indegree_data$in_degree*indegree_data$mean_n
> sum(inedges_target)
[1] 20256.49
> 
> outedges_target <- outdegree_data$out_degree*outdegree_data$mean_n
> sum(outedges_target)
[1] 25663.36
> 
> # Degree and dist assignments ---------
> 
> deg.terms <- 0:3
> indeg.terms.0 <- 0
> indeg.terms <- 0:1  
> 
> dist.terms <- 1:3 #fourth is left out
> 
> class(target_race_num)
[1] "numeric"
> target_race_num <- unname(target_race_num)
> 
> 
> # Helper function to only run fits that were not previously saved ----------
> 
> load_or_run <- function(name, expr) {
+   path <- file.path(out_dir, paste0(name, ".rds"))
+   if (file.exists(path)) {
+     message("Loading saved ", name)
+     readRDS(path)
+   } else {
+     message("Running and saving ", name)
+     obj <- eval(expr)
+     saveRDS(obj, path)
+     obj
+   }
+ }
> 
> 
> 
> # Fit Non-empty net including race term ---------
> 
> fit_nonempty_network_w_race_num <- 
+ load_or_run("fit_nonempty_network_w_race_num", quote(
+   ergm(
+     edges_only_net ~
+       edges + 
+       nodemix("sex", levels2=-1)+
+       nodemix("young", levels2=-1)+
+       nodemix("race.num", levels2=-1),
+     target.stats = 
+     c(
+       edges_target,
+       c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
+       c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+       target_race_num      
+     ),
+     eval.loglik = FALSE,
+     control = control.ergm(
+       MCMLE.maxit = 500,
+       main.method = c("Stochastic-Approximation"),
+       MCMC.interval = 1e6,
+       MCMC.samplesize = 1e6,
+       MCMLE.termination = "Hotelling",
+       MCMC.effectiveSize=NULL,
+       SAN = control.san(
+         SAN.maxit = 500, 
+         SAN.nsteps = 1e8
+       )
+     )
+     )
+ )
+ )
Loading saved fit_nonempty_network_w_race_num
> 
> non_empty_net_w_race_term <- load_or_run("net_nonempty_w_race_term", quote(
+   simulate(fit_nonempty_network_w_race_num, nsim=1)
+   )
+ )
Loading saved net_nonempty_w_race_term
> non_empty_net_w_race_term
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 23089 
    missing edges= 0 
    non-missing edges= 23089 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit.stepwise.dist <-
+ load_or_run("fit.stepwise.dist", quote(
+   ergm(
+     non_empty_net_w_race_term ~
+       edges + 
+       nodemix("sex", levels2=-1)+
+       nodemix("young", levels2=-1)+
+       nodemix("race.num", levels2=-1)+
+       #idegree(indeg.terms)+
+       #odegree(deg.terms)+
+       dist(dist.terms),
+     target.stats = 
+     c(
+       edges_target,
+       c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),           
+       c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+       target_race_num,
+       #c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+       #c(outedges$n_nodes[c(deg.terms+1)])
+       c(dist.nedge.distribution[dist.terms])
+     ),
+     eval.loglik = FALSE,
+     control = control.ergm(
+       MCMLE.maxit = 500,
+       main.method = c("Stochastic-Approximation"),
+       MCMC.interval = 1e6,
+       MCMC.samplesize = 1e6,
+       MCMLE.termination = "Hotelling",
+       MCMC.effectiveSize=NULL,
+       SAN = control.san(
+         SAN.maxit = 500, 
+         SAN.nsteps = 1e8
+       )
+     )                     
+     )
+ )
+ )
Running and saving fit.stepwise.dist
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -12.60802494       0.39938896       0.32055640       0.48167391 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.36016844      -1.62847002      -0.04799849       1.88290308 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      1.92232558       3.82928740       0.77149354       2.60922377 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      1.43300633       4.35134197       0.65419448       0.54953724 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      2.25483996       3.39744503      -1.32640561       0.36600145 
mix.race.num.3.4 mix.race.num.4.4            dist1            dist2 
     -0.47219560       2.82779391       6.56410843       3.57592817 
           dist3 
     -1.18611540 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
     -12.5719322        0.1807740       -0.1343367        0.2340383 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
      -0.2780027       -1.6689878        0.2057517        1.9365758 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
       2.2130468        4.2015955        1.0221417        2.8056075 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
       1.5472759        4.0449435        0.7276508        0.6094635 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
       2.6215394        3.1507862       -1.2218033        0.2788099 
mix.race.num.3.4 mix.race.num.4.4            dist1            dist2 
      -0.6116563        1.8093440        6.8012630        3.5627190 
           dist3 
      -1.1274695 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
>   
> net_stepwise_dist <- load_or_run("net.stepwise.dist", 
+   quote(simulate(fit.stepwise.dist, nsim=1)
+   )
+ )
Running and saving net.stepwise.dist
> 
> net_stepwise_dist
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 22933 
    missing edges= 0 
    non-missing edges= 22933 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> # fit.stepwise.dist.odeg <-
> #   ergm(
> #     net_stepwise_dist ~
> #       edges + 
> #       nodemix("sex", levels2=-1)+
> #       nodemix("young", levels2=-1)+
> #       nodemix("race.num", levels2=-1)+
> #       #idegree(indeg.terms)+
> #       odegree(deg.terms)+
> #       dist(dist.terms),
> #     target.stats = 
> #     c(
> #       edges_target,
> #       c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),           
> #       c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
> #       target_race_num,
> #       #c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
> #       c(outdegree_data$mean_n[c(deg.terms+1)]),
> #       c(dist.nedge.distribution[dist.terms])
> #     ),
> #     eval.loglik = FALSE,
> #     control = control.ergm(
> #       MCMLE.maxit = 500,
> #       main.method = c("Stochastic-Approximation"),
> #       MCMC.interval = 1e6,
> #       MCMC.samplesize = 1e6,
> #       MCMLE.termination = "Hotelling",
> #       MCMC.effectiveSize=NULL,
> #       SAN = control.san(
> #         SAN.maxit = 500, 
> #         SAN.nsteps = 1e8
> #       )
> #     )                         
> #     )
> 
> #   net_fit_stepwise_dist_odeg <- simulate(fit.stepwise.dist.odeg, nsim=1)
> #   net_fit_stepwise_dist_odeg
> 
> # fit.stepwise.dist.odeg.ideg0 <-
> #   ergm(
> #     net_fit_stepwise_dist_odeg ~
> #       edges + 
> #       nodemix("sex", levels2=-1)+
> #       nodemix("young", levels2=-1)+
> #       nodemix("race.num", levels2=-1)+
> #       idegree(indeg.terms.0)+
> #       odegree(deg.terms)+
> #       dist(dist.terms),
> #     target.stats = 
> #     c(
> #       edges_target,
> #       c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),           
> #       c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
> #       target_race_num,
> #       c(indegree_data$mean_n[c(indeg.terms.0+1)]),
> #       c(outdegree_data$mean_n[c(deg.terms+1)]),
> #       c(dist.nedge.distribution[dist.terms])
> #     ),
> #     eval.loglik = FALSE,
> #     control = control.ergm(
> #       MCMLE.maxit = 500,
> #       main.method = c("Stochastic-Approximation"),
> #       MCMC.interval = 1e6,
> #       MCMC.samplesize = 1e6,
> #       MCMLE.termination = "Hotelling",
> #       MCMC.effectiveSize=NULL,
> #       SAN = control.san(
> #         SAN.maxit = 500, 
> #         SAN.nsteps = 1e8
> #       )
> #     )                         
> #     )
> 
> # net_fit_stepwise_dist_odeg_ideg0 <- simulate(fit.stepwise.dist.odeg.ideg0, nsim=1)
> # net_fit_stepwise_dist_odeg_ideg0
> 
> 
> 
> 
> # fit.stepwise.dist.odeg.ideg <-
> #   ergm(
> #     net_fit_stepwise_dist_odeg_ideg0 ~
> #       edges + 
> #       nodemix("sex", levels2=-1)+
> #       nodemix("young", levels2=-1)+
> #       nodemix("race.num", levels2=-1)+
> #       idegree(indeg.terms)+
> #       odegree(deg.terms)+
> #       dist(dist.terms),
> #     target.stats = 
> #     c(
> #       edges_target,
> #       c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),           
> #       c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
> #       target_race_num,
> #       c(indegree_data$mean_n[c(indeg.terms.0+1)]),
> #       c(outdegree_data$mean_n[c(deg.terms+1)]),
> #       c(dist.nedge.distribution[dist.terms])
> #     )
> #     ,
> #     eval.loglik = FALSE,
> #     control = control.ergm(
> #       MCMLE.maxit = 500,
> #       main.method = c("Stochastic-Approximation"),
> #       MCMC.interval = 1e6,
> #       MCMC.samplesize = 1e6,
> #       MCMLE.termination = "Hotelling",
> #       MCMC.effectiveSize=NULL,
> #       SAN = control.san(
> #         SAN.maxit = 500, 
> #         SAN.nsteps = 1e8
> #       )
> #     )
> #   )                         
>     
> 
> # net_fit_stepwise_dist_odeg_ideg <-simulate(fit.stepwise.dist.odeg.ideg, nsim=1)
> # net_fit_stepwise_dist_odeg_ideg
> 
> ## save.image(file=here("fit-ergms", "out", "stepwise-refactored-std-order-2025-jan23-targets.RData"))  
> save.image(file = file.path(out_dir, paste0(run_label, ".RData")))
> 
> proc.time()
    user   system  elapsed 
1102.382   20.159 1130.567 
