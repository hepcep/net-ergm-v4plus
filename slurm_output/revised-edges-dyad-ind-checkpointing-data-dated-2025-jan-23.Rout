
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

- Project '/oscar/home/akhann16/code/net-ergm-v4plus' loaded. [renv 1.0.7]
- The project is out-of-sync -- use `renv::status()` for details.
> # Analyze synthetic dataset with 32K nodes
> 
> 
> # Fit ERGM with 5 dyadic independent terms
> 
> rm(list = ls())
> 
> # Label and outputs for this run
> run_label <- "stepwise-refactored-checkpointing-data-dated-2025-jan23" # set manually to ensure intentional updates
> 
> # Activate R environment ----------
> 
> library(renv)

Attaching package: ‘renv’

The following objects are masked from ‘package:stats’:

    embed, update

The following objects are masked from ‘package:utils’:

    history, upgrade

The following objects are masked from ‘package:base’:

    autoload, load, remove, use

> renv::activate()
> 
> 
> # Libraries ----------
> 
> library(network)

‘network’ 1.18.2 (2023-12-04), part of the Statnet Project
* ‘news(package="network")’ for changes since last version
* ‘citation("network")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

> library(ergm)

‘ergm’ 4.6.0 (2023-12-17), part of the Statnet Project
* ‘news(package="ergm")’ for changes since last version
* ‘citation("ergm")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

‘ergm’ 4 is a major update that introduces some backwards-incompatible
changes. Please type ‘news(package="ergm")’ for a list of major
changes.

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ergm.userterms)
Loading required package: statnet.common

Attaching package: ‘statnet.common’

The following objects are masked from ‘package:base’:

    attr, order


‘ergm.userterms’ 3.1.1 (2020-02-01), part of the Statnet Project
* ‘news(package="ergm.userterms")’ for changes since last version
* ‘citation("ergm.userterms")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

> library(here)
here() starts at /oscar/home/akhann16/code/net-ergm-v4plus
> library(styler)
> 
> 
> # Create output directory ---------
> out_dir <- here("fit-ergms", "out", run_label)
> if (!dir.exists(out_dir)) dir.create(out_dir, recursive = FALSE)
> 
> 
> # Load data objects ----------
> 
> data_objects <- readRDS(here("fit-ergms", "out", "processed_data.rds"))
> names(data_objects)
 [1] "data"                    "n0"                     
 [3] "edges_only_net"          "tgt.old.pctyoung"       
 [5] "tgt.young.pctold"        "tgt.young.pctyoung"     
 [7] "edges_target"            "tgt.female.pctmale"     
 [9] "tgt.male.pctfemale"      "tgt.male.pctmale"       
[11] "target_race_num"         "indegree_data"          
[13] "outdegree_data"          "dist_nedge_distribution"
> 
> data <- data_objects$data
> n0 <- data_objects$n0
> edges_only_net <- data_objects$edges_only_net
> edges_target <- data_objects$edges_target
> tgt.female.pctmale <- data_objects$tgt.female.pctmale
> tgt.male.pctfemale <- data_objects$tgt.male.pctfemale
> tgt.male.pctmale <- data_objects$tgt.male.pctmale
> tgt.old.pctyoung <- data_objects$tgt.old.pctyoung
> tgt.young.pctold <- data_objects$tgt.young.pctold
> tgt.young.pctyoung <- data_objects$tgt.young.pctyoung
> indegree_data <- data_objects$indegree_data
> target_race_num <- data_objects$target_race_num
> outdegree_data <- data_objects$outdegree_data
> dist.nedge.distribution <- data_objects$dist_nedge_distribution
> 
> inedges_target <- indegree_data$in_degree * indegree_data$mean_n
> sum(inedges_target)
[1] 20256.49
> 
> outedges_target <- outdegree_data$out_degree * outdegree_data$mean_n
> sum(outedges_target)
[1] 25663.36
> 
> # Degree and dist assignments ---------
> 
> ## outdegrees
> deg.terms <- 0:3
> deg.terms.0 <- 0
> deg.terms.0.1 <- 0:1
> deg.terms.0_2 <- 0:2
> 
> ## indegrees
> indeg.terms.0 <- 0
> indeg.terms <- 0:1
> 
> ## dist
> dist.terms <- 1:3 # fourth is left out
> 
> class(target_race_num)
[1] "numeric"
> target_race_num <- unname(target_race_num)
> 
> 
> # Helper function to only run fits that were not previously saved ----------
> 
> load_or_run <- function(name, expr) {
+   path <- file.path(out_dir, paste0(name, ".rds"))
+   if (file.exists(path)) {
+     message("Loading saved ", name)
+     readRDS(path)
+   } else {
+     message("Running and saving ", name)
+     obj <- eval(expr)
+     saveRDS(obj, path)
+     obj
+   }
+ }
> 
> 
> 
> # Fit Non-empty net including race term ---------
> 
> fit_nonempty_network_w_race_num <-
+   load_or_run("fit_nonempty_network_w_race_num", quote(
+     ergm(
+       edges_only_net ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         nodemix("race.num", levels2 = -1),
+       target.stats =
+         c(
+           edges_target,
+           c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
+           c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+           target_race_num
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Loading saved fit_nonempty_network_w_race_num
> 
> non_empty_net_w_race_term <- load_or_run("net_nonempty_w_race_term", quote(
+   simulate(fit_nonempty_network_w_race_num, nsim = 1)
+ ))
Loading saved net_nonempty_w_race_term
> non_empty_net_w_race_term
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 23089 
    missing edges= 0 
    non-missing edges= 23089 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit.stepwise.dist <-
+   load_or_run("fit.stepwise.dist", quote(
+     ergm(
+       non_empty_net_w_race_term ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         nodemix("race.num", levels2 = -1) +
+         # idegree(indeg.terms)+
+         # odegree(deg.terms)+
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
+           c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+           target_race_num,
+           # c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+           # c(outedges$n_nodes[c(deg.terms+1)])
+           c(dist.nedge.distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Loading saved fit.stepwise.dist
> 
> net_stepwise_dist <- load_or_run(
+   "net.stepwise.dist",
+   quote(simulate(fit.stepwise.dist, nsim = 1))
+ )
Loading saved net.stepwise.dist
> 
> net_stepwise_dist
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 22933 
    missing edges= 0 
    non-missing edges= 22933 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit.stepwise.dist.odeg.0 <-
+   load_or_run("fit.stepwise.dist.odeg.0", quote(
+     ergm(
+       net_stepwise_dist ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         nodemix("race.num", levels2 = -1) +
+         # idegree(indeg.terms)+
+         odegree(deg.terms.0) +
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
+           c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+           target_race_num,
+           # c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+           c(outdegree_data$mean_n[c(deg.terms.0 + 1)]),
+           c(dist.nedge.distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit.stepwise.dist.odeg.0
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -12.38040488      -0.28124368      -0.04995071       0.17838623 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.17022117      -1.88818444       0.08131202       1.79564897 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      2.06829401       4.16900758       0.78049190       2.87399169 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      0.73843222       4.20402112       0.68689339       0.94563775 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      3.03171812       3.00928546      -1.31950415       0.78266121 
mix.race.num.3.4 mix.race.num.4.4         odegree0            dist1 
     -0.29256833       2.34513105      -0.09122121       7.12480245 
           dist2            dist3 
      3.41689526      -1.31285022 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
     -12.4821745        0.1533598       -0.1821399        0.1909768 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
      -0.2873169       -1.6754342        0.1845943        1.7839699 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
       2.0651958        4.1143285        0.8079109        2.6455625 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
       1.3870983        3.9344261        0.5166121        0.4607747 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
       2.4781668        3.0537233       -1.4034494        0.1069983 
mix.race.num.3.4 mix.race.num.4.4         odegree0            dist1 
      -0.7617829        1.6639178       -0.1593425        6.8944111 
           dist2            dist3 
       3.5985098       -1.0982287 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> net_fit_stepwise_dist_odeg0 <- load_or_run("net_fit_stepwise_dist_odeg0", quote(
+   simulate(fit.stepwise.dist.odeg.0, nsim = 1)
+ ))
Loading saved net_fit_stepwise_dist_odeg0
> net_fit_stepwise_dist_odeg0
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 22750 
    missing edges= 0 
    non-missing edges= 22750 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> # fit.stepwise.dist.odeg.ideg0 <-
> #   ergm(
> #     net_fit_stepwise_dist_odeg ~
> #       edges +
> #       nodemix("sex", levels2=-1)+
> #       nodemix("young", levels2=-1)+
> #       nodemix("race.num", levels2=-1)+
> #       idegree(indeg.terms.0)+
> #       odegree(deg.terms)+
> #       dist(dist.terms),
> #     target.stats =
> #     c(
> #       edges_target,
> #       c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
> #       c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
> #       target_race_num,
> #       c(indegree_data$mean_n[c(indeg.terms.0+1)]),
> #       c(outdegree_data$mean_n[c(deg.terms+1)]),
> #       c(dist.nedge.distribution[dist.terms])
> #     ),
> #     eval.loglik = FALSE,
> #     control = control.ergm(
> #       MCMLE.maxit = 500,
> #       main.method = c("Stochastic-Approximation"),
> #       MCMC.interval = 1e6,
> #       MCMC.samplesize = 1e6,
> #       MCMLE.termination = "Hotelling",
> #       MCMC.effectiveSize=NULL,
> #       SAN = control.san(
> #         SAN.maxit = 500,
> #         SAN.nsteps = 1e8
> #       )
> #     )
> #     )
> 
> # net_fit_stepwise_dist_odeg_ideg0 <- simulate(fit.stepwise.dist.odeg.ideg0, nsim=1)
> # net_fit_stepwise_dist_odeg_ideg0
> 
> 
> 
> 
> # fit.stepwise.dist.odeg.ideg <-
> #   ergm(
> #     net_fit_stepwise_dist_odeg_ideg0 ~
> #       edges +
> #       nodemix("sex", levels2=-1)+
> #       nodemix("young", levels2=-1)+
> #       nodemix("race.num", levels2=-1)+
> #       idegree(indeg.terms)+
> #       odegree(deg.terms)+
> #       dist(dist.terms),
> #     target.stats =
> #     c(
> #       edges_target,
> #       c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
> #       c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
> #       target_race_num,
> #       c(indegree_data$mean_n[c(indeg.terms.0+1)]),
> #       c(outdegree_data$mean_n[c(deg.terms+1)]),
> #       c(dist.nedge.distribution[dist.terms])
> #     )
> #     ,
> #     eval.loglik = FALSE,
> #     control = control.ergm(
> #       MCMLE.maxit = 500,
> #       main.method = c("Stochastic-Approximation"),
> #       MCMC.interval = 1e6,
> #       MCMC.samplesize = 1e6,
> #       MCMLE.termination = "Hotelling",
> #       MCMC.effectiveSize=NULL,
> #       SAN = control.san(
> #         SAN.maxit = 500,
> #         SAN.nsteps = 1e8
> #       )
> #     )
> #   )
> 
> 
> # net_fit_stepwise_dist_odeg_ideg <-simulate(fit.stepwise.dist.odeg.ideg, nsim=1)
> # net_fit_stepwise_dist_odeg_ideg
> 
> ## save.image(file=here("fit-ergms", "out", "stepwise-refactored-std-order-2025-jan23-targets.RData"))
> save.image(file = file.path(out_dir, paste0(run_label, ".RData")))
> 
> proc.time()
    user   system  elapsed 
1046.575   24.991 1077.891 
