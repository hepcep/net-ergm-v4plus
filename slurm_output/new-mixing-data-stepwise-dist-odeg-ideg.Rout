
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

- Project '/oscar/home/akhann16/code/net-ergm-v4plus' loaded. [renv 1.0.7]
> # Analyze synthetic dataset with 32K nodes 
> 
> # Fit ERGM with 5 dyadic independent terms
> 
> rm(list=ls())
> 
> # Activate R environment ------------------------------
> 
> library(renv)

Attaching package: ‘renv’

The following objects are masked from ‘package:stats’:

    embed, update

The following objects are masked from ‘package:utils’:

    history, upgrade

The following objects are masked from ‘package:base’:

    autoload, load, remove, use

> renv::activate()
> 
> 
> # Libraries ----------
> 
> library(network)

‘network’ 1.18.2 (2023-12-04), part of the Statnet Project
* ‘news(package="network")’ for changes since last version
* ‘citation("network")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

> library(ergm)

‘ergm’ 4.6.0 (2023-12-17), part of the Statnet Project
* ‘news(package="ergm")’ for changes since last version
* ‘citation("ergm")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

‘ergm’ 4 is a major update that introduces some backwards-incompatible
changes. Please type ‘news(package="ergm")’ for a list of major
changes.

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ergm.userterms)
Loading required package: statnet.common

Attaching package: ‘statnet.common’

The following objects are masked from ‘package:base’:

    attr, order


‘ergm.userterms’ 3.1.1 (2020-02-01), part of the Statnet Project
* ‘news(package="ergm.userterms")’ for changes since last version
* ‘citation("ergm.userterms")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

> library(here)
here() starts at /oscar/home/akhann16/code/net-ergm-v4plus
> 
> 
> # Read Synthpop Data ------------------------------ 
> 
> data_path <- here("data", "synthpop-2023-10-12 12_01_32.csv")
> data <- read.csv(data_path, header=TRUE)
> glimpse(data)
Rows: 32,002
Columns: 15
$ sex                       <chr> "M", "M", "M", "M", "M", "M", "M", "M", "M",…
$ race                      <chr> "Wh", "Wh", "Wh", "Wh", "Wh", "Wh", "Wh", "W…
$ agecat                    <chr> "18-24", "18-24", "18-24", "18-24", "18-24",…
$ age_started               <int> 18, 19, 16, 19, 5, 19, 15, 17, 25, 18, 21, 1…
$ fraction_recept_sharing   <dbl> 1.00, 0.10, 0.10, 0.00, 0.00, 0.00, 0.25, 0.…
$ syringe_source            <int> 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,…
$ daily_injection_intensity <chr> "once or twice a day", "once or twice a day"…
$ age_lb                    <int> 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, …
$ age_ub                    <int> 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, …
$ age                       <int> 23, 21, 19, 20, 21, 21, 21, 21, 25, 18, 24, …
$ zipcode                   <int> 60644, 60644, 60644, 60644, 60644, 60644, 60…
$ Zip                       <int> 60644, 60644, 60644, 60644, 60644, 60644, 60…
$ lon                       <dbl> -87.76885, -87.77289, -87.76898, -87.76998, …
$ lat                       <dbl> 41.88311, 41.88240, 41.86867, 41.89144, 41.8…
$ hcv_status                <chr> "sucseptible", "sucseptible", "sucseptible",…
> 
> # Input  In/Outdegree Data ------------------------------
> # (from networks simulated form the fit, as an alternate source of targets)
> 
> inedges <- read.csv(here("data", "pplrss.csv")) #in- and out-edges
> outedges <- read.csv(here("data", "ppldss.csv"))
> negbin_indeg <- read.csv(here("data", "negbin-indeg.csv"))
> negbin_outdeg <- read.csv(here("data", "negbin-outdeg.csv"))
> inedges.data <- read.csv(file = here("data", "inedges_data.csv"), header = TRUE)
> outedges.data <- read.csv(file = here("data", "outedges_data.csv"), header = TRUE)
> 
> # Input  Degree Distribution Data ------------------------------
> 
> #degree_distribution_target_stats <- 
>  # readRDS(here("simulate-from-ergms/out/degree_distribution_target_stats.RDS"))
> #names(degree_distribution_target_stats)
> 
>  
> 
> # Initialize network ----------
> 
> n <- nrow(data)
> n0 <- network.initialize(n = n, directed = TRUE)
> 
> 
> # Compute target number of edges ----------
> 
> inedges_target <- sum(inedges.data$k * inedges.data$nbprob * n)
> outedges_target <- sum(outedges.data$k * outedges.data$nbprob * n)
> edges_target <- mean(c(inedges_target, outedges_target))
> 
> 
> 
> 
> # Assign vertex attributes to the network ----------
> 
> synthpop_cols <- colnames(data)
> set.vertex.attribute(n0, colnames(data), data)
> 
> 
> # Test assignment between `n0` vertex attributes and `synthpop_cols` ----------
> 
> ## For sex variable
> identical(n0%v%"sex", data$sex)
[1] TRUE
> table(n0%v%"sex", exclude=NULL)

    F     M 
12573 19429 
> 
> ## For all variables:
> ### get vertex attribute names from the n0 graph object
> vertex_attr_names <- list.vertex.attributes(n0)
> 
> # define a function to check if a vertex attribute is identical to the corresponding column in data
> check_identical <- function(attr_name) {
+   graph_attr <- n0 %v% attr_name
+   data_attr <- data[[attr_name]]
+   
+   return(identical(graph_attr, data_attr))
+ }
> 
> ### use sapply() to apply the check_identical() function to all vertex attribute names
> identical_results <- sapply(vertex_attr_names, check_identical)
> 
> ### print the results
> print(identical_results)
                      age                    age_lb               age_started 
                     TRUE                      TRUE                      TRUE 
                   age_ub                    agecat daily_injection_intensity 
                     TRUE                      TRUE                      TRUE 
  fraction_recept_sharing                hcv_status                       lat 
                     TRUE                      TRUE                      TRUE 
                      lon                        na                      race 
                     TRUE                     FALSE                      TRUE 
                      sex            syringe_source              vertex.names 
                     TRUE                      TRUE                     FALSE 
                      Zip                   zipcode 
                     TRUE                      TRUE 
> 
> ### check if any values other than 'vertex.names' are FALSE
> if (any(identical_results[!(names(identical_results) %in% c("vertex.names", "na"))] == FALSE)) {
+   stop("Error: Some vertex attributes do not match the corresponding columns in data.")
+ } else {
+   cat("Test passed: All relevant vertex attributes match the corresponding columns in data.\n")
+ }
Test passed: All relevant vertex attributes match the corresponding columns in data.
> 
> 
> # Recode to add new variables to dataset ------------------------------
> 
> # young (< 26, to be set = 1) vs old (>= 26, to be set = 0) 
> age.cat <- n0 %v% "age"
> age.cat.df <- as.data.frame(age.cat)
> age.cat.df <-  
+   mutate(age.cat, young = ifelse(age.cat <26, 1, 0), .data = age.cat.df)
> xtabs(~age.cat+young, data = age.cat.df)
       young
age.cat    0    1
     18    0  471
     19    0  695
     20    0  854
     21    0 1053
     22    0 1142
     23    0 1286
     24    0 1561
     25    0  739
     26  787    0
     27  910    0
     28  946    0
     29 1018    0
     30 1024    0
     31 1027    0
     32 1119    0
     33 1110    0
     34 1117    0
     35  576    0
     36  585    0
     37  584    0
     38  617    0
     39  611    0
     40  676    0
     41  670    0
     42  732    0
     43  727    0
     44  719    0
     45  240    0
     46  232    0
     47  261    0
     48  253    0
     49  238    0
     50  225    0
     51  228    0
     52  233    0
     53  250    0
     54  235    0
     55  224    0
     56  231    0
     57  225    0
     58  269    0
     59  230    0
     60  258    0
     61  238    0
     62  245    0
     63  251    0
     64  252    0
     65  253    0
     66  212    0
     67  258    0
     68  231    0
     69  238    0
     70  229    0
     71  235    0
     72  219    0
     73  243    0
     74  263    0
     75  271    0
     76  243    0
     77  213    0
     78  256    0
     79  240    0
     80  224    0
> 
> # recode race variable to set ordering of categories
> race <- n0 %v% "race"
> race.num <- recode(race, 
+                    Wh = 1, Bl = 2,
+                    Hi = 3, Ot = 4)
> 
> # Initialize network and add attributes ----------
> 
> n0 %v% "young" <- age.cat.df$young
> n0 %v% "race.num" <- race.num
> 
> 
> # Generate target statistics from meta-mixing data ----------
>   ## Update with values meta mixing values from 08/31/2021
>   ## See https://anl.box.com/s/jrf5usly4ujuv3gagmdxlwxaiuvnlq1o
>   ## All network mixing parameters with CIs: https://anl.box.com/s/jg6y221hcbql1sd9kvsxpq0cei03qlr0
> 
> ## gender 
> ### mixing information from meta-analysis of sathcap AND socnet
> edges.male.end <- 0.58
> edges.female.end <- 0.40
> 
> male.pctmale <- 0.68 
> male.pctfemale <- 0.32
> female.pctmale <- 0.61
> female.pctfemale <- 0.39
> 
> ### set gender targets 
> tgt.male.pctmale <- edges_target*edges.male.end*male.pctmale
> tgt.male.pctfemale <- edges_target*edges.male.end*male.pctfemale
> tgt.female.pctmale <- edges_target*edges.female.end*female.pctmale  
> tgt.female.pctfemale <- edges_target*edges.female.end*female.pctfemale
> 
> ## young (1=young; 0=old)
> ### mixing information from meta-analysis of sathcap AND socnet
> edges.young.end <- 0.10
> edges.old.end <- 0.90
>   
> young.pctyoung <- 0.61
> young.pctold <- 0.39
> old.pctyoung <- 0.14
> old.pctold <- 0.86
>  
> ## set young targets from meta data
> tgt.young.pctyoung <- edges_target * edges.young.end * young.pctyoung
> tgt.young.pctold <- edges_target * edges.young.end * young.pctold
> tgt.old.pctyoung <- edges_target * edges.old.end * old.pctyoung
> tgt.old.pctold <- edges_target * edges.old.end * old.pctold
> 
> 
> 
> ## race (1=white, 2=black, 3=hispanic, 4=other)
> 
> table(n0 %v% "race")

   Bl    Hi    Ot    Wh 
 8317  6853  1429 15403 
> table(n0 %v% "race.num", exclude=NULL) # will be sorted as per 1=W, 2=B, 3=H, 4=O

    1     2     3     4 
15403  8317  6853  1429 
> 
> 
> pct_to_white	<- 0.30
> pct_to_black	<- 0.41
> pct_to_hispanic	<- 0.21
> pct_to_other	<- 0.04
> 
> race.w.w <- 0.74 # (marks sum to 1)
> race.b.w <- 0.31 #-
> race.h.w <- 0.37 ##
> race.o.w <- 0.54 #--
> race.w.b <- 0.11 #
> race.b.b <- 0.57 #-
> race.h.b <- 0.10 ##
> race.o.b <- 0.23 #--
> race.w.h <- 0.13 #
> race.b.h <- 0.07 #-
> race.h.h <- 0.51 ##
> race.o.h <- 0.16 #--
> race.w.o <- 0.02 #
> race.b.o <- 0.05 #-
> race.h.o <- 0.02 ##
> race.o.o <- 0.07 #--
> 
> target.w.w <- edges_target * pct_to_white * race.w.w
> target.b.w <- edges_target * pct_to_white * race.b.w
> target.h.w <- edges_target * pct_to_white * race.h.w
> target.o.w <- edges_target * pct_to_white * race.o.w
> 
> target.w.b <- edges_target * pct_to_black * race.w.b
> target.b.b <- edges_target * pct_to_black * race.b.b
> target.h.b <- edges_target * pct_to_black * race.h.b
> target.o.b <- edges_target * pct_to_black * race.o.b
> 
> target.w.h <- edges_target * pct_to_hispanic * race.w.h
> target.b.h <- edges_target * pct_to_hispanic * race.b.h
> target.h.h <- edges_target * pct_to_hispanic * race.h.h
> target.o.h <- edges_target * pct_to_hispanic * race.o.h
> 
> target.w.o <- edges_target * pct_to_other * race.w.o
> target.b.o <- edges_target * pct_to_other * race.b.o
> target.h.o <- edges_target * pct_to_other * race.h.o
> target.o.o <- edges_target * pct_to_other * race.o.o
> 
> target_race_num  <- c(
+             target.b.w, target.h.w, target.o.w,
+   target.w.b, target.b.b, target.h.b, target.o.b,
+   target.w.h, target.b.h, target.h.h, target.o.h,
+   target.w.o, target.b.o, target.h.o, target.o.o
+ )
> 
> target_race_num
 [1] 2292.63576 2736.37172 3993.62359 1111.80509 5761.17180 1010.73190
 [7] 2324.68336  672.99953  362.38436 2640.22893  828.30711   19.72160
[13]   49.30399   19.72160   69.02559
> 
> ## degree distributions
> inedges <- inedges %>% 
+   mutate(n_nodes = n*nbprob)
> outedges <- outedges %>% 
+   mutate(n_nodes = n*nbprob)
> 
> negbin_inedges <- negbin_indeg %>% 
+   mutate(n_nodes = n*nbprob)
> negbin_outedges <- negbin_outdeg %>% 
+   mutate(n_nodes = n*nbprob)
> 
> ## distance term
> 
> dist.prop.distribution <- c(15.7, 35.1, 24.1, 22)/100
> dist.nedge.distribution <- edges_target*dist.prop.distribution
> 
> # Fit ERGM (with SATHCAP mixing) ----------
> 
> deg.terms <- 0:3
> indeg.terms <- 0:1  
> 
> dist.terms <- 1:3 #fourth is left out
> #dist.terms <- 3 #only try the third term
> 
> # Code before the stop point
>   ## print("Running code before the stop point")
>   ## stop("Stopping here")
> 
> # Fit non-empty network ---------
> 
> fit_nonemmpty_network <- 
+   ergm(
+     n0 ~
+       edges + 
+       nodemix("sex", levels2=-1)+
+       nodemix("young", levels2=-1),
+     target.stats = 
+     c(
+       edges_target,
+       c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
+       c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung)      
+     ),
+     eval.loglik = FALSE    
+     )
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Starting Monte Carlo maximum likelihood estimation (MCMLE):
Iteration 1 of at most 60:
Optimizing with step length 0.4267.
The log-likelihood improved by 2.5621.
Estimating equations are not within tolerance region.
Iteration 2 of at most 60:
Optimizing with step length 0.8237.
The log-likelihood improved by 3.1233.
Estimating equations are not within tolerance region.
Iteration 3 of at most 60:
Optimizing with step length 1.0000.
The log-likelihood improved by 0.3551.
Estimating equations are not within tolerance region.
Iteration 4 of at most 60:
Optimizing with step length 1.0000.
The log-likelihood improved by 0.3235.
Estimating equations are not within tolerance region.
Iteration 5 of at most 60:
Optimizing with step length 1.0000.
The log-likelihood improved by 0.1456.
Estimating equations are not within tolerance region.
Iteration 6 of at most 60:
Optimizing with step length 1.0000.
The log-likelihood improved by 0.0542.
Convergence test p-value: 0.8371. Not converged with 99% confidence; increasing sample size.
Iteration 7 of at most 60:
Optimizing with step length 1.0000.
The log-likelihood improved by 0.0668.
Convergence test p-value: 0.4470. Not converged with 99% confidence; increasing sample size.
Iteration 8 of at most 60:
Optimizing with step length 1.0000.
The log-likelihood improved by 0.0163.
Convergence test p-value: 0.0140. Not converged with 99% confidence; increasing sample size.
Iteration 9 of at most 60:
Optimizing with step length 1.0000.
The log-likelihood improved by 0.0417.
Convergence test p-value: 0.0231. Not converged with 99% confidence; increasing sample size.
Iteration 10 of at most 60:
Optimizing with step length 1.0000.
The log-likelihood improved by 0.0370.
Convergence test p-value: 0.0039. Converged with 99% confidence.
Finished MCMLE.
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
>   
> 
> non_empty_net <- simulate(fit_nonemmpty_network, nsim=1)
> 
> # Test alignment of race_num ----------
> 
>   # Define the known mapping
>   num_to_race <- c("Wh", "Bl", "Hi", "Ot")  # 1=Wh,2=Bl,3=Hi,4=Ot
> 
>   # Retrieve the summaries
>   race_num_alignment <- summary(non_empty_net ~ nodemix("race.num", levels2 = -1))
>   race_term_alignment <- summary(non_empty_net ~ nodemix("race", levels2 = -1))
> 
>   # Print them for reference
>   print(race_num_alignment)
mix.race.num.2.1 mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 
            2850             2320              468             3334 
mix.race.num.2.2 mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 
            2036             1638              313             2427 
mix.race.num.2.3 mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 
            1511             1225              240              517 
mix.race.num.2.4 mix.race.num.3.4 mix.race.num.4.4 
             296              250               46 
>   print(race_term_alignment)
mix.race.Hi.Bl mix.race.Ot.Bl mix.race.Wh.Bl mix.race.Bl.Hi mix.race.Hi.Hi 
          1638            313           3334           1511           1225 
mix.race.Ot.Hi mix.race.Wh.Hi mix.race.Bl.Ot mix.race.Hi.Ot mix.race.Ot.Ot 
           240           2427            296            250             46 
mix.race.Wh.Ot mix.race.Bl.Wh mix.race.Hi.Wh mix.race.Ot.Wh mix.race.Wh.Wh 
           517           2850           2320            468           5086 
> 
>   cat("\nChecking all numeric-to-category race mappings:\n\n")

Checking all numeric-to-category race mappings:

> 
>   # Loop over all combinations (i,j)
>   for (i in 1:4) {
+     for (j in 1:4) {
+       # Construct term names
+       num_term <- paste0("mix.race.num.", i, ".", j)
+       race_term <- paste0("mix.race.", num_to_race[i], ".", num_to_race[j])
+       
+       # Check if both terms exist
+       if (num_term %in% names(race_num_alignment) && race_term %in% names(race_term_alignment)) {
+         # Compare counts
+         num_count <- race_num_alignment[num_term]
+         race_count <- race_term_alignment[race_term]
+         
+         if (num_count == race_count) {
+           cat("Confirmed: (", i, ",", j, ") in race.num = (", num_to_race[i], ",", num_to_race[j],
+               ") in race. Count:", num_count, "\n")
+         } else {
+           cat("Mismatch: (", i, ",", j, ") in race.num = (", num_to_race[i], ",", num_to_race[j], 
+               "). Counts differ: ", num_count, " vs ", race_count, "\n")
+         }
+       } else {
+         # At least one of the terms wasn't found in the alignment vectors
+         cat("Term not found for (", i, ",", j, "): ", num_term, " or ", race_term, "\n")
+       }
+     }
+   }
Term not found for ( 1 , 1 ):  mix.race.num.1.1  or  mix.race.Wh.Wh 
Confirmed: ( 1 , 2 ) in race.num = ( Wh , Bl ) in race. Count: 3334 
Confirmed: ( 1 , 3 ) in race.num = ( Wh , Hi ) in race. Count: 2427 
Confirmed: ( 1 , 4 ) in race.num = ( Wh , Ot ) in race. Count: 517 
Confirmed: ( 2 , 1 ) in race.num = ( Bl , Wh ) in race. Count: 2850 
Term not found for ( 2 , 2 ):  mix.race.num.2.2  or  mix.race.Bl.Bl 
Confirmed: ( 2 , 3 ) in race.num = ( Bl , Hi ) in race. Count: 1511 
Confirmed: ( 2 , 4 ) in race.num = ( Bl , Ot ) in race. Count: 296 
Confirmed: ( 3 , 1 ) in race.num = ( Hi , Wh ) in race. Count: 2320 
Confirmed: ( 3 , 2 ) in race.num = ( Hi , Bl ) in race. Count: 1638 
Confirmed: ( 3 , 3 ) in race.num = ( Hi , Hi ) in race. Count: 1225 
Confirmed: ( 3 , 4 ) in race.num = ( Hi , Ot ) in race. Count: 250 
Confirmed: ( 4 , 1 ) in race.num = ( Ot , Wh ) in race. Count: 468 
Confirmed: ( 4 , 2 ) in race.num = ( Ot , Bl ) in race. Count: 313 
Confirmed: ( 4 , 3 ) in race.num = ( Ot , Hi ) in race. Count: 240 
Confirmed: ( 4 , 4 ) in race.num = ( Ot , Ot ) in race. Count: 46 
> 
> # Fit Non-empty net including race term ---------
> 
> fit_nonemmpty_network_w_race_num <- 
+   ergm(
+     non_empty_net ~
+       edges + 
+       nodemix("sex", levels2=-1)+
+       nodemix("young", levels2=-1)+
+       nodemix("race.num", levels2=-1),
+     target.stats = 
+     c(
+       edges_target,
+       c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
+       c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+       target_race_num      
+     ),
+     eval.loglik = FALSE,
+     control = control.ergm(
+       MCMLE.maxit = 500,
+       main.method = c("Stochastic-Approximation"),
+       MCMC.interval = 1e6,
+       MCMC.samplesize = 1e6,
+       MCMLE.termination = "Hotelling",
+       MCMC.effectiveSize=NULL,
+       SAN = control.san(
+         SAN.maxit = 500, 
+         SAN.nsteps = 1e8
+       )
+     )
+     )
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -12.27086085      -0.05725525      -0.42804568      -0.08560862 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.33299343      -1.68426773       0.13482163       1.78209635 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      2.09293619       4.09699059       0.87967299       3.12028027 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      1.57714974       3.98519523       0.68295363       0.70543702 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      2.84042084       3.25816894      -1.19765412       0.12007125 
mix.race.num.3.4 mix.race.num.4.4 
     -0.46187087       2.15090881 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
   -12.293231101     -0.057358764     -0.364959562     -0.008653681 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
    -0.329430533     -1.710133835      0.139879463      1.786105287 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
     2.114748606      4.067414768      0.870813663      3.075308228 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
     1.532285249      3.971706397      0.624202390      0.611765772 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
     2.771585805      3.213900683     -1.304098821      0.221745741 
mix.race.num.3.4 mix.race.num.4.4 
    -0.514576378      2.321870034 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> non_empty_net_w_race_term <- simulate(fit_nonemmpty_network_w_race_num, nsim=1)
> non_empty_net_w_race_term
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 24569 
    missing edges= 0 
    non-missing edges= 24569 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit.stepwise.dist <-
+   ergm(
+     non_empty_net ~
+       edges + 
+       nodemix("sex", levels2=-1)+
+       nodemix("young", levels2=-1)+
+       nodemix("race.num", levels2=-1)+
+       #idegree(indeg.terms)+
+       #odegree(deg.terms)+
+       dist(dist.terms),
+     target.stats = 
+     c(
+       edges_target,
+       c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),           
+       c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+       target_race_num,
+       #c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+       #c(outedges$n_nodes[c(deg.terms+1)])
+       c(dist.nedge.distribution[dist.terms])
+     ),
+     eval.loglik = FALSE,
+     control = control.ergm(
+       MCMLE.maxit = 500,
+       main.method = c("Stochastic-Approximation"),
+       MCMC.interval = 1e6,
+       MCMC.samplesize = 1e6,
+       MCMLE.termination = "Hotelling",
+       MCMC.effectiveSize=NULL,
+       SAN = control.san(
+         SAN.maxit = 500, 
+         SAN.nsteps = 1e8
+       )
+     )
+                            
+     )
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
   -1.225313e+01     2.892829e-01    -7.915594e-02    -9.710518e-04 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
   -3.072643e-01    -1.586038e+00     3.547318e-01     1.974840e+00 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
    2.170039e+00     4.113423e+00     7.303127e-01     2.504789e+00 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
    1.203012e+00     3.470361e+00     5.867421e-01     8.016604e-01 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
    2.624776e+00     2.717440e+00    -1.597620e+00     7.231251e-01 
mix.race.num.3.4 mix.race.num.4.4            dist1            dist2 
   -2.462595e-01     2.990203e+00     6.522156e+00     3.523599e+00 
           dist3 
   -1.211543e+00 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
     -12.2979339        0.1611823       -0.1615152        0.2025599 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
      -0.3014819       -1.6828289        0.1865157        1.7626982 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
       2.0508171        4.0382184        0.8556093        2.6407671 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
       1.3867473        3.8862367        0.5646666        0.4514210 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
       2.4684907        3.0195303       -1.3888194        0.1031495 
mix.race.num.3.4 mix.race.num.4.4            dist1            dist2 
      -0.7816551        1.5971648        6.7988131        3.5450900 
           dist3 
      -1.1434563 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
Warning message:
In ergm.mple(s, s.obs, init = init, control = control, verbose = verbose,  :
  GLM may be separable; restarting glm with zeros.

>   
> net_stepwise_dist <- simulate(fit.stepwise.dist, nsim=1)
> net_stepwise_dist
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 24429 
    missing edges= 0 
    non-missing edges= 24429 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit.stepwise.dist.odeg <-
+   ergm(
+     net_stepwise_dist ~
+       edges + 
+       nodemix("sex", levels2=-1)+
+       nodemix("young", levels2=-1)+
+       nodemix("race.num", levels2=-1)+
+       #idegree(indeg.terms)+
+       odegree(deg.terms)+
+       dist(dist.terms),
+     target.stats = 
+     c(
+       edges_target,
+       c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),           
+       c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+       target_race_num,
+       #c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+       c(outedges$n_nodes[c(deg.terms+1)]),
+       c(dist.nedge.distribution[dist.terms])
+     ),
+     eval.loglik = FALSE,
+     control = control.ergm(
+       MCMLE.maxit = 500,
+       main.method = c("Stochastic-Approximation"),
+       MCMC.interval = 1e6,
+       MCMC.samplesize = 1e6,
+       MCMLE.termination = "Hotelling",
+       MCMC.effectiveSize=NULL,
+       SAN = control.san(
+         SAN.maxit = 500, 
+         SAN.nsteps = 1e8
+       )
+     )                         
+     )
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -43.75337838       0.41012968      -0.01359419       0.11006872 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.46224529      -1.65431876       0.06286364       1.57715001 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      1.40371014      34.66801450       1.04762542       2.00578155 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      1.12895302      34.89152599       0.41934568      -0.27100732 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      1.42191854      32.76113629      -4.29851969       0.05225713 
mix.race.num.3.4 mix.race.num.4.4         odegree0         odegree1 
     -1.50051727      32.41698469    -126.72582150     -95.38759387 
        odegree2         odegree3            dist1            dist2 
    -63.36439738     -30.16864890       7.30757787       3.89232903 
           dist3 
     -1.49927241 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -43.72138571       0.20492619      -0.13414221       0.24659005 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.27678432      -1.66443470       0.20565915       1.43960933 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      1.71783244      34.83018478       0.83376196       2.24685360 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      1.00701757      34.71539698       0.54954017       0.07929459 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      2.08585957      33.79567251      -1.39734540      -0.24644073 
mix.race.num.3.4 mix.race.num.4.4         odegree0         odegree1 
     -1.14651133      32.39494880    -127.02924406     -95.92540576 
        odegree2         odegree3            dist1            dist2 
    -64.03497267     -31.89331193       7.03575771       3.68875828 
           dist3 
     -1.03623844 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
Warning messages:
1: In mple.existence(pl) : The MPLE does not exist!
2: In ergm.mple(s, s.obs, init = init, control = control, verbose = verbose,  :
  GLM may be separable; restarting glm with zeros.

3: glm.fit: fitted probabilities numerically 0 or 1 occurred 
4: Approximate Hessian matrix is singular. Standard errors due to MCMC approximation of the likelihood cannot be evaluated. This is likely due to insufficient MCMC sample size or highly correlated model terms. 
> 
>   net_fit_stepwise_dist_odeg <- simulate(fit.stepwise.dist.odeg, nsim=1)
> 
> fit.stepwise.dist.odeg.ideg <-
+   ergm(
+     net_fit_stepwise_dist_odeg ~
+       edges + 
+       nodemix("sex", levels2=-1)+
+       nodemix("young", levels2=-1)+
+       nodemix("race.num", levels2=-1)+
+       idegree(indeg.terms)+
+       odegree(deg.terms)+
+       dist(dist.terms),
+     target.stats = 
+     c(
+       edges_target,
+       c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),           
+       c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+       target_race_num,
+       c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+       c(outedges$n_nodes[c(deg.terms+1)]),
+       c(dist.nedge.distribution[dist.terms])
+     ),
+     eval.loglik = FALSE,
+     control = control.ergm(
+       MCMLE.maxit = 500,
+       main.method = c("Stochastic-Approximation"),
+       MCMC.interval = 1e6,
+       MCMC.samplesize = 1e6,
+       MCMLE.termination = "Hotelling",
+       MCMC.effectiveSize=NULL,
+       SAN = control.san(
+         SAN.maxit = 500, 
+         SAN.nsteps = 1e8
+       )
+     )                         
+     )
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -39.23783271      -0.03260198      -0.62435363      -0.15770944 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.25901269      -0.83381602       0.62617637       1.36881011 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      0.94737952      32.47957972       0.51009935       2.54023531 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      1.28342394      32.09572533       0.56349026      -0.04571548 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      2.05285843      31.04426581      -1.87950551       0.20699499 
mix.race.num.3.4 mix.race.num.4.4         idegree0         idegree1 
      0.29707151      31.24905317       4.90466286       2.01002403 
        odegree0         odegree1         odegree2         odegree3 
   -113.78820933     -85.06419927     -55.98722787     -25.86288530 
           dist1            dist2            dist3 
      7.07266126       3.25439040      -1.55278401 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -39.31986465      -0.01814329      -0.26292253       0.17743083 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.31473386      -1.09168348       0.74196808       1.69969954 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      1.96908247      31.97603395       0.63718089       2.34641566 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      0.95760272      31.67896375       0.77865168       0.48204752 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      2.46487147      31.07023966      -0.31283267       1.08635384 
mix.race.num.3.4 mix.race.num.4.4         idegree0         idegree1 
      0.18528063      30.71917906       4.75135120       2.04725355 
        odegree0         odegree1         odegree2         odegree3 
   -113.43871493     -85.14927865     -56.25051154     -27.00221489 
           dist1            dist2            dist3 
      6.74896878       3.24416567      -1.10888950 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
Warning messages:
1: In mple.existence(pl) : The MPLE does not exist!
2: Approximate Hessian matrix is singular. Standard errors due to MCMC approximation of the likelihood cannot be evaluated. This is likely due to insufficient MCMC sample size or highly correlated model terms. 
> 
> net_fit_stepwise_dist_odeg_ideg <- simulate(fit.stepwise.dist.odeg.ideg, nsim=1)
> net_fit_stepwise_dist_odeg_ideg
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 30616 
    missing edges= 0 
    non-missing edges= 30616 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> save.image(file=here("fit-ergms", "out", "new-mixing-data-with-hotelling-stochasticapprox-non-empty-net-stepwise-dist-odeg-ideg.RData"))  ise-dist-odeg-ideg.RData"))  
Error: unexpected symbol in "save.image(file=here("fit-ergms", "out", "new-mixing-data-with-hotelling-stochasticapprox-non-empty-net-stepwise-dist-odeg-ideg.RData"))  ise"
Execution halted
