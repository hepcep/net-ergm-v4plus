
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

- Project '/oscar/home/akhann16/code/net-ergm-v4plus' loaded. [renv 1.0.7]
> # Analyze synthetic dataset with 32K nodes
> 
> 
> # Fit ERGM with 5 dyadic independent terms
> 
> rm(list = ls())
> 
> # Label and outputs for this run
> run_label <- "stepwise-refactored-checkpointing-data-dated-2025-jan23-redone" # set manually to ensure intentional updates
> 
> # Activate R environment ----------
> 
> library(renv)

Attaching package: ‘renv’

The following objects are masked from ‘package:stats’:

    embed, update

The following objects are masked from ‘package:utils’:

    history, upgrade

The following objects are masked from ‘package:base’:

    autoload, load, remove, use

> renv::activate()
> 
> 
> # Libraries ----------
> 
> library(network)

‘network’ 1.18.2 (2023-12-04), part of the Statnet Project
* ‘news(package="network")’ for changes since last version
* ‘citation("network")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

> library(ergm)

‘ergm’ 4.6.0 (2023-12-17), part of the Statnet Project
* ‘news(package="ergm")’ for changes since last version
* ‘citation("ergm")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

‘ergm’ 4 is a major update that introduces some backwards-incompatible
changes. Please type ‘news(package="ergm")’ for a list of major
changes.

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ergm.userterms)
Loading required package: statnet.common

Attaching package: ‘statnet.common’

The following objects are masked from ‘package:base’:

    attr, order


‘ergm.userterms’ 3.1.1 (2020-02-01), part of the Statnet Project
* ‘news(package="ergm.userterms")’ for changes since last version
* ‘citation("ergm.userterms")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

> library(here)
here() starts at /oscar/home/akhann16/code/net-ergm-v4plus
> library(styler)
> 
> 
> # Create output directory ---------
> out_dir <- here("fit-ergms", "out", run_label)
> if (!dir.exists(out_dir)) dir.create(out_dir, recursive = FALSE)
> 
> 
> # Load data objects ----------
> 
> data_objects <- readRDS(here("fit-ergms", "out", "processed_data.rds"))
> names(data_objects)
 [1] "data"                    "n0"                     
 [3] "edges_only_net"          "tgt.old.pctyoung"       
 [5] "tgt.young.pctold"        "tgt.young.pctyoung"     
 [7] "edges_target"            "tgt.female.pctmale"     
 [9] "tgt.male.pctfemale"      "tgt.male.pctmale"       
[11] "target_race_num"         "indegree_data"          
[13] "outdegree_data"          "dist_nedge_distribution"
> 
> intersect(names(data_objects), ls())
character(0)
> list2env(data_objects, envir = globalenv())
<environment: R_GlobalEnv>
> ls()
 [1] "data"                    "data_objects"           
 [3] "dist_nedge_distribution" "edges_only_net"         
 [5] "edges_target"            "indegree_data"          
 [7] "n0"                      "out_dir"                
 [9] "outdegree_data"          "run_label"              
[11] "target_race_num"         "tgt.female.pctmale"     
[13] "tgt.male.pctfemale"      "tgt.male.pctmale"       
[15] "tgt.old.pctyoung"        "tgt.young.pctold"       
[17] "tgt.young.pctyoung"     
> 
> inedges_target <- indegree_data$in_degree * indegree_data$mean_n
> sum(inedges_target)
[1] 20256.49
> 
> outedges_target <- outdegree_data$out_degree * outdegree_data$mean_n
> sum(outedges_target)
[1] 25663.36
> 
> # Degree and dist assignments ---------
> 
> ## outdegrees
> deg.terms <- 0:3
> deg.terms.0 <- 0
> deg.terms.0_1 <- 0:1
> deg.terms.0_2 <- 0:2
> deg.terms.013 <- c(0, 1, 3)
> 
> ## indegrees
> indeg.terms.0 <- 0
> indeg.terms <- 0:1
> 
> ## dist
> dist.terms <- 1:3 # fourth is left out
> 
> class(target_race_num)
[1] "numeric"
> target_race_num <- unname(target_race_num)
> 
> 
> # Helper function to only run fits that were not previously saved ----------
> 
> load_or_run <- function(name, expr) {
+   path <- file.path(out_dir, paste0(name, ".rds"))
+   if (file.exists(path)) {
+     message("Loading saved ", name)
+     readRDS(path)
+   } else {
+     message("Running and saving ", name)
+     obj <- eval(expr)
+     saveRDS(obj, path)
+     obj
+   }
+ }
> 
> 
> 
> # Fit Non-empty net including race term ---------
> 
> fit_nonempty_network_w_race_num <-
+   load_or_run("fit_nonempty_network_w_race_num", quote(
+     ergm(
+       edges_only_net ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         nodemix("race.num", levels2 = -1),
+       target.stats =
+         c(
+           edges_target,
+           c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
+           c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+           target_race_num
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit_nonempty_network_w_race_num
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -12.38793184      -0.05737056      -0.35443316      -0.02259433 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.34943462      -1.74852957       0.13801942       1.79601844 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      2.12698292       4.05644367       0.96710198       3.15743343 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      1.65482619       4.09761387       0.65486618       0.63861015 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      2.78981339       3.30115867      -1.34549535       0.29391330 
mix.race.num.3.4 mix.race.num.4.4 
     -0.53343145       2.51106189 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
   -12.384233900     -0.053743265     -0.363037354     -0.006923333 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
    -0.327620201     -1.712615057      0.141613314      1.806837916 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
     2.133165869      4.086489490      0.887469157      3.092738335 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
     1.550367951      3.989207834      0.641154162      0.625877276 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
     2.789638163      3.232077469     -1.316586047      0.250876632 
mix.race.num.3.4 mix.race.num.4.4 
    -0.501052497      2.351206074 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> non_empty_net_w_race_term <- load_or_run("net_nonempty_w_race_term", quote(
+   simulate(fit_nonempty_network_w_race_num, nsim = 1)
+ ))
Running and saving net_nonempty_w_race_term
> non_empty_net_w_race_term
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 22787 
    missing edges= 0 
    non-missing edges= 22787 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit.stepwise.dist <-
+   load_or_run("fit.stepwise.dist", quote(
+     ergm(
+       non_empty_net_w_race_term ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         nodemix("race.num", levels2 = -1) +
+         # idegree(indeg.terms)+
+         # odegree(deg.terms)+
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
+           c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+           target_race_num,
+           # c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+           # c(outedges$n_nodes[c(deg.terms+1)])
+           c(dist_nedge_distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit.stepwise.dist
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -11.95932579      -0.17603028      -0.64527240      -0.40515136 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.45543801      -1.74487135      -0.03666822       1.58703018 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      1.98975057       4.06364538       0.88140228       2.29938365 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      1.51329747       4.12985409       0.58411330       0.36575598 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      2.74354240       3.12403267      -1.13926802       0.51484801 
mix.race.num.3.4 mix.race.num.4.4            dist1            dist2 
     -0.25456449       2.52375539       6.42264809       3.63751591 
           dist3 
     -1.08618041 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
   -12.227262823      0.130967150     -0.187421030      0.175651444 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
    -0.308322953     -1.684204580      0.175188709      1.658459988 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
     1.941684865      3.933160092      0.756787561      2.545575312 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
     1.289327524      3.763874930      0.469080289      0.351125387 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
     2.378300178      2.896951235     -1.473668417      0.001935577 
mix.race.num.3.4 mix.race.num.4.4            dist1            dist2 
    -0.879766020      1.526811426      6.750530723      3.524728169 
           dist3 
    -1.161451461 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
Warning message:
In ergm.mple(s, s.obs, init = init, control = control, verbose = verbose,  :
  GLM may be separable; restarting glm with zeros.

> 
> net_stepwise_dist <- load_or_run(
+   "net.stepwise.dist",
+   quote(simulate(fit.stepwise.dist, nsim = 1))
+ )
Running and saving net.stepwise.dist
> 
> net_stepwise_dist
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 22934 
    missing edges= 0 
    non-missing edges= 22934 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit.stepwise.dist.odeg.0 <-
+   load_or_run("fit.stepwise.dist.odeg.0", quote(
+     ergm(
+       net_stepwise_dist ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         nodemix("race.num", levels2 = -1) +
+         # idegree(indeg.terms)+
+         odegree(deg.terms.0) +
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
+           c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+           target_race_num,
+           # c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+           c(outdegree_data$mean_n[c(deg.terms.0 + 1)]),
+           c(dist_nedge_distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit.stepwise.dist.odeg.0
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -12.84955631       0.64193829       0.33897118       0.69989741 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.31142411      -1.73404567       0.05968589       1.99310749 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      2.07087855       4.02327717       0.88984123       2.66329078 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      1.14148357       4.37233760       0.15710605       0.35968875 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      1.92208317       2.52894788      -1.29436957       0.46226644 
mix.race.num.3.4 mix.race.num.4.4         odegree0            dist1 
     -0.46303237       2.54746019       0.01331665       7.18640229 
           dist2            dist3 
      4.00258866      -1.06120490 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -12.84117469       0.24705977      -0.09034122       0.29410862 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.25888640      -1.65607747       0.22507240       2.01949650 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      2.28748355       4.38127054       0.99980265       2.89295175 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      1.62166036       4.17957960       0.71369456       0.70316144 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      2.70630829       3.32060899      -1.24665092       0.36737981 
mix.race.num.3.4 mix.race.num.4.4         odegree0            dist1 
     -0.55237595       1.99251639      -0.23937035       6.86128085 
           dist2            dist3 
      3.61764562      -1.09125124 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> net_fit_stepwise_dist_odeg0 <- load_or_run("net_fit_stepwise_dist_odeg0", quote(
+   simulate(fit.stepwise.dist.odeg.0, nsim = 1)
+ ))
Running and saving net_fit_stepwise_dist_odeg0
> net_fit_stepwise_dist_odeg0
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 23296 
    missing edges= 0 
    non-missing edges= 23296 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit.stepwise.dist.odeg.0.1 <-
+   load_or_run("fit.stepwise.dist.odeg.0.1", quote(
+     ergm(
+       net_fit_stepwise_dist_odeg0 ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         nodemix("race.num", levels2 = -1) +
+         # idegree(indeg.terms)+
+         odegree(deg.terms.0_1) +
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
+           c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+           target_race_num,
+           # c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+           c(outdegree_data$mean_n[c(deg.terms.0_1 + 1)]),
+           c(dist_nedge_distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit.stepwise.dist.odeg.0.1
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -13.69211514      -0.01514096      -0.40629302      -0.17554778 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.34986135      -1.65187787      -0.11139251       1.98983178 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      1.91411965       5.76795767       0.39191043       2.10102649 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      0.86274582       5.03341510       0.25398980       0.40222097 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      2.29603363       4.08581702      -1.30398880       0.49345493 
mix.race.num.3.4 mix.race.num.4.4         odegree0         odegree1 
     -0.56789138       3.91145023      -3.74712854      -2.18347524 
           dist1            dist2            dist3 
      7.25536772       3.98715253      -1.01211575 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -13.86306206       0.19496053      -0.16427406       0.24158266 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.29538768      -1.67864612       0.16166063       1.72249423 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      1.97136620       5.41198542       0.75125323       2.60431070 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      1.31006346       5.26902981       0.47121600       0.42231007 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      2.39522429       4.38710939      -1.47235495       0.08095083 
mix.race.num.3.4 mix.race.num.4.4         odegree0         odegree1 
     -0.87556375       3.04928044      -3.60682447      -2.16528470 
           dist1            dist2            dist3 
      6.80335245       3.58233940      -1.14730673 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> net_fit_stepwise_dist_odeg0_1 <- 
+ load_or_run("net_fit_stepwise_dist_odeg0_1", quote(
+   simulate(fit.stepwise.dist.odeg.0.1, nsim = 1)
+ ))
Running and saving net_fit_stepwise_dist_odeg0_1
> net_fit_stepwise_dist_odeg0_1
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 22800 
    missing edges= 0 
    non-missing edges= 22800 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit.stepwise.dist.odeg.0.2 <-
+   load_or_run("fit.stepwise.dist.odeg.0.2", quote(
+     ergm(
+       net_fit_stepwise_dist_odeg0_1 ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         nodemix("race.num", levels2 = -1) +
+         # idegree(indeg.terms)+
+         odegree(deg.terms.0_2) +
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
+           c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+           target_race_num,
+           # c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+           c(outdegree_data$mean_n[c(deg.terms.0_2 + 1)]),
+           c(dist_nedge_distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit.stepwise.dist.odeg.0.2
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
     -61.0540687        1.4820319        0.3200644        1.6825701 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
      -0.3574195       -2.0358737        0.5147821        2.2156526 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
       2.3247508       50.4055294        1.4334269        3.3844629 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
       0.6472771       51.2658858        0.1839822        0.6902556 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
       2.3946484       50.7253585       -0.9517696        2.0526078 
mix.race.num.3.4 mix.race.num.4.4         odegree0         odegree1 
       0.7049191       49.3921930     -126.3654617      -80.0147535 
        odegree2            dist1            dist2            dist3 
     -30.7083338        7.7414267        3.5252455       -1.5591114 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -60.70571985       0.85688685       0.30006029       0.92048875 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.07596341      -1.56994033       0.46083555       3.06612545 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      3.25166460      51.17917850       1.89891504       3.75549733 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      2.56492227      51.03000017       1.59494597       1.66651075 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      3.60824852      50.09163318      -0.34480597       1.35274474 
mix.race.num.3.4 mix.race.num.4.4         odegree0         odegree1 
      0.36050736      48.81908077    -127.02578737     -80.76461333 
        odegree2            dist1            dist2            dist3 
    -34.06057820       7.35713705       4.04089816      -0.78249853 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
Warning messages:
1: In mple.existence(pl) : The MPLE does not exist!
2: Approximate Hessian matrix is singular. Standard errors due to MCMC approximation of the likelihood cannot be evaluated. This is likely due to insufficient MCMC sample size or highly correlated model terms. 
> 
> net_fit_stepwise_dist_odeg0_2 <- 
+ load_or_run("net_fit_stepwise_dist_odeg0_2", quote(
+   simulate(fit.stepwise.dist.odeg.0.2, nsim = 1)
+ ))
Running and saving net_fit_stepwise_dist_odeg0_2
> net_fit_stepwise_dist_odeg0_2 #this is degenerate
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 2500123 
    missing edges= 0 
    non-missing edges= 2500123 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit.stepwise.dist.odeg.013 <-
+   load_or_run("fit.stepwise.dist.odeg.0.2", quote(
+     ergm(
+       net_fit_stepwise_dist_odeg0_1 ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         nodemix("race.num", levels2 = -1) +
+         # idegree(indeg.terms)+
+         odegree(deg.terms.013) +
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
+           c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+           target_race_num,
+           # c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+           c(outdegree_data$mean_n[c(deg.terms.013 + 1)]),
+           c(dist_nedge_distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Loading saved fit.stepwise.dist.odeg.0.2
> 
> net_fit_stepwise_dist_odeg013 <- 
+ load_or_run("net_fit_stepwise_dist_odeg013", quote(
+   simulate(fit.stepwise.dist.odeg.013, nsim = 1)
+ ))
Running and saving net_fit_stepwise_dist_odeg013
> net_fit_stepwise_dist_odeg013 #this is degenerate
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 2506817 
    missing edges= 0 
    non-missing edges= 2506817 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> 
> fit.stepwise.dist.odeg.01.indeg0 <-
+   load_or_run("fit.stepwise.dist.odeg.01.indeg0", quote(
+     ergm(
+       net_fit_stepwise_dist_odeg0_1 ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         nodemix("race.num", levels2 = -1) +
+         idegree(indeg.terms.0)+
+         odegree(deg.terms.0_1) +
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
+           c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+           target_race_num,
+           c(indegree_data$mean_n[c(indeg.terms.0 + 1)]),
+           c(outdegree_data$mean_n[c(deg.terms.0_1 + 1)]),
+           c(dist_nedge_distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit.stepwise.dist.odeg.01.indeg0
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
     -13.6994789        0.3462815       -0.1110266        0.2453428 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
      -0.3349220       -1.7992256        0.4777922        1.5021823 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
       2.3877222        6.0944857        0.8144921        3.0549978 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
       1.2802397        4.9984734        0.8166643        1.1408513 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
       3.1192206        5.1933392       -0.6842251        0.4328952 
mix.race.num.3.4 mix.race.num.4.4         idegree0         odegree0 
      -0.4566832        1.8336064        1.5547836       -3.9586054 
        odegree1            dist1            dist2            dist3 
      -2.2607254        7.0502789        3.4032642       -1.2204442 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -13.74569359       0.25507626      -0.12764285       0.33710486 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.25956887      -1.32670832       0.55748513       2.01285821 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      2.24388004       5.78606185       0.82065797       2.75099432 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      1.42350224       5.47409781       0.74277073       0.74409845 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      2.69904974       4.78421592      -0.68438544       0.95614783 
mix.race.num.3.4 mix.race.num.4.4         idegree0         odegree0 
      0.04483209       4.04499782       1.52036886      -3.91871527 
        odegree1            dist1            dist2            dist3 
     -2.26576893       6.81784535       3.51796040      -1.09394592 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> net_fit_stepwise_dist_odeg01_indeg0 <- 
+ load_or_run("net_fit_stepwise_dist_odeg01_indeg0", quote(
+   simulate(fit.stepwise.dist.odeg.01.indeg0, nsim = 1)
+ ))
Running and saving net_fit_stepwise_dist_odeg01_indeg0
> net_fit_stepwise_dist_odeg01_indeg0 
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 23114 
    missing edges= 0 
    non-missing edges= 23114 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> ###
> 
> fit.stepwise.dist.odeg.01.indeg <-
+   load_or_run("fit.stepwise.dist.odeg.01.indeg", quote(
+     ergm(
+       net_fit_stepwise_dist_odeg0_1 ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         nodemix("race.num", levels2 = -1) +
+         idegree(indeg.terms)+
+         odegree(deg.terms.0_1) +
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           c(tgt.female.pctmale, tgt.male.pctfemale, tgt.male.pctmale),
+           c(tgt.old.pctyoung, tgt.young.pctold, tgt.young.pctyoung),
+           target_race_num,
+           c(indegree_data$mean_n[c(indeg.terms + 1)]),
+           c(outdegree_data$mean_n[c(deg.terms.0_1 + 1)]),
+           c(dist_nedge_distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit.stepwise.dist.odeg.01.indeg
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
     -13.7986556        0.8793151        0.2263886        1.1506167 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
      -0.2054483       -1.5698461        0.8289499        2.1766342 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
       2.2096817        5.7577675        0.8649059        3.0743161 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
       1.4764590        5.1782635        0.6073442        0.8379023 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
       2.5979140        5.6061951       -0.2207410        1.9166247 
mix.race.num.3.4 mix.race.num.4.4         idegree0         idegree1 
       0.6257733        5.5059856        3.6515698        1.6568094 
        odegree0         odegree1            dist1            dist2 
      -4.2180153       -2.5041231        6.8993209        3.1784369 
           dist3 
      -1.3706728 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
           edges      mix.sex.M.F      mix.sex.F.M      mix.sex.M.M 
    -13.77419201       0.39845856      -0.04729794       0.47671770 
   mix.young.1.0    mix.young.0.1    mix.young.1.1 mix.race.num.2.1 
     -0.24428228      -1.28306024       0.61918398       2.14115417 
mix.race.num.3.1 mix.race.num.4.1 mix.race.num.1.2 mix.race.num.2.2 
      2.35331881       6.14610846       0.86803250       2.86715237 
mix.race.num.3.2 mix.race.num.4.2 mix.race.num.1.3 mix.race.num.2.3 
      1.50132802       5.77669355       0.84139282       0.90974964 
mix.race.num.3.3 mix.race.num.4.3 mix.race.num.1.4 mix.race.num.2.4 
      2.84738960       5.16046585      -0.66788095       1.06227326 
mix.race.num.3.4 mix.race.num.4.4         idegree0         idegree1 
      0.10769430       4.38866978       3.01097581       1.33637402 
        odegree0         odegree1            dist1            dist2 
     -4.44380195      -2.50784600       6.72641301       3.45865481 
           dist3 
     -1.12690527 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> net_fit_stepwise_dist_odeg01_indeg <- 
+ load_or_run("net_fit_stepwise_dist_odeg01_indeg", quote(
+   simulate(fit.stepwise.dist.odeg.01.indeg0, nsim = 1)
+ ))
Running and saving net_fit_stepwise_dist_odeg01_indeg
> net_fit_stepwise_dist_odeg01_indeg0 
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 23114 
    missing edges= 0 
    non-missing edges= 23114 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> ## save.image(file=here("fit-ergms", "out", "stepwise-refactored-std-order-2025-jan23-targets.RData"))
> save.image(file = file.path(out_dir, paste0(run_label, ".RData")))
> 
> proc.time()
    user   system  elapsed 
7230.150  157.992 7425.048 
