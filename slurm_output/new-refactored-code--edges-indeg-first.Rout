
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

- Project '/oscar/home/akhann16/code/net-ergm-v4plus' loaded. [renv 1.0.7]
> # Analyze synthetic dataset with 32K nodes 
> 
> 
> # Fit ERGM with 5 dyadic independent terms
> 
> rm(list=ls())
> 
> # Activate R environment ----------
> 
> library(renv)

Attaching package: ‘renv’

The following objects are masked from ‘package:stats’:

    embed, update

The following objects are masked from ‘package:utils’:

    history, upgrade

The following objects are masked from ‘package:base’:

    autoload, load, remove, use

> renv::activate()
> 
> 
> # Libraries ----------
> 
> library(network)

‘network’ 1.18.2 (2023-12-04), part of the Statnet Project
* ‘news(package="network")’ for changes since last version
* ‘citation("network")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

> library(ergm)

‘ergm’ 4.6.0 (2023-12-17), part of the Statnet Project
* ‘news(package="ergm")’ for changes since last version
* ‘citation("ergm")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

‘ergm’ 4 is a major update that introduces some backwards-incompatible
changes. Please type ‘news(package="ergm")’ for a list of major
changes.

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ergm.userterms)
Loading required package: statnet.common

Attaching package: ‘statnet.common’

The following objects are masked from ‘package:base’:

    attr, order


‘ergm.userterms’ 3.1.1 (2020-02-01), part of the Statnet Project
* ‘news(package="ergm.userterms")’ for changes since last version
* ‘citation("ergm.userterms")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

> library(here)
here() starts at /oscar/home/akhann16/code/net-ergm-v4plus
> 
> 
> # Load data objects ----------
> data_objects <- readRDS(here("fit-ergms", "out", "processed_data.rds"))
> names(data_objects)
 [1] "data"                    "n0"                     
 [3] "edges_only_net"          "tgt.old.pctyoung"       
 [5] "tgt.young.pctold"        "tgt.young.pctyoung"     
 [7] "edges_target"            "tgt.female.pctmale"     
 [9] "tgt.male.pctfemale"      "tgt.male.pctmale"       
[11] "target_race_num"         "negbin_inedges"         
[13] "outedges"                "dist_nedge_distribution"
> 
>  data <- data_objects$data
>  n0 <- data_objects$n0                     
>  edges_only_net <- data_objects$edges_only_net 
>  edges_target <- data_objects$edges_target           
>  tgt.female.pctmale <- data_objects$tgt.female.pctmale      
>  tgt.male.pctfemale <- data_objects$tgt.male.pctfemale
>  tgt.male.pctmale <- data_objects$tgt.male.pctmale    
>  tgt.old.pctyoung <- data_objects$tgt.old.pctyoung
>  tgt.young.pctold <- data_objects$tgt.young.pctold
>  tgt.young.pctyoung <- data_objects$tgt.young.pctyoung
>  negbin_inedges <- data_objects$negbin_inedges   
>  target_race_num <- data_objects$target_race_num      
>  outedges <- data_objects$outedges
>  dist_nedge_distribution <- data_objects$dist_nedge_distribution
> 
> 
> 
> # Degree and dist assignments ---------
> deg.terms <- 0:3
> indeg.terms.0 <- 0
> indeg.terms <- 0:1  
> 
> dist.terms <- 1:3 #fourth is left out
> 
> 
> # Define file paths for saved fitted ERGMs ---------
> 
> edges_indeg_model_path <- here("fit-ergms", "out", "fit_edges_indegree.rds")
> edges_indeg_outdeg_model_path <- here("fit-ergms", "out", "fit_edges_indegree_outdegree.rds")
> 
> 
> # Define filepaths for saved simulated networks ---------
> 
> sim_edges_indeg_path <- here("fit-ergms", "out", "sim_edges_indeg.rds")
> sim_edges_indeg_outdeg_path <- here("fit-ergms", "out", "sim_edges_indeg_outdeg.rds")
> 
> 
> 
> # Edges+Indeg ---------
> 
> if (file.exists(edges_indeg_model_path)) {
+   fit_edges_indegree <- readRDS(edges_indeg_model_path)
+   message("Loaded fit_edges_indegree from file.")
+ } else {
+   fit_edges_indegree <- 
+       ergm(
+           edges_only_net ~
+           edges + 
+           idegree(indeg.terms),
+           target.stats = 
+           c(
+           edges_target,
+         c(negbin_inedges$n_nodes[c(indeg.terms+1)])
+           ),
+           eval.loglik = FALSE,
+           control = control.ergm(
+           MCMLE.maxit = 500,
+           main.method = c("Stochastic-Approximation"),
+           MCMC.interval = 1e6,
+           MCMC.samplesize = 1e6,
+           MCMLE.termination = "Hotelling",
+           MCMC.effectiveSize=NULL,
+           SAN = control.san(
+               SAN.maxit = 500, 
+               SAN.nsteps = 1e8
+           )
+           )                         
+           )
+   saveRDS(fit_edges_indegree, edges_indeg_model_path)
+   message("Saved fit_edges_indegree to file.")
+ }
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
    edges  idegree0  idegree1 
-8.947622  5.975193  2.831220 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
    edges  idegree0  idegree1 
-8.963337  5.612110  2.485691 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
Saved fit_edges_indegree to file.
> 
> 
> if (file.exists(sim_edges_indeg_path)) {
+   net_fit_edges_indeg <- readRDS(sim_edges_indeg_path)
+   message("Loaded simulated network net_fit_edges_indeg from file.")
+ } else {
+   net_fit_edges_indeg <- simulate(fit_edges_indegree, nsim = 1)
+   saveRDS(net_fit_edges_indeg, sim_edges_indeg_path)
+   message("Saved simulated network net_fit_edges_indeg to file.")
+ }
Saved simulated network net_fit_edges_indeg to file.
> 
> 
> # Edges+Indeg+OutDeg ---------
> 
> if (file.exists(edges_indeg_outdeg_model_path)) {
+     fit_edges_indegree_outdegree <- readRDS(edges_indeg_outdeg_model_path)
+     message("Loaded fit_edges_indegree_outdegree from file.")
+ } else {
+   fit_edges_indegree_outdegree <- 
+       ergm(
+            net_fit_edges_indeg ~
+           edges + 
+           idegree(indeg.terms)+
+           odegree(deg.terms),
+           target.stats = 
+           c(
+           edges_target,
+         c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+           c(outedges$n_nodes[c(deg.terms+1)])
+           ),
+           eval.loglik = FALSE,
+           control = control.ergm(
+           MCMLE.maxit = 500,
+           main.method = c("Stochastic-Approximation"),
+           MCMC.interval = 1e6,
+           MCMC.samplesize = 1e6,
+           MCMLE.termination = "Hotelling",
+           MCMC.effectiveSize=NULL,
+           SAN = control.san(
+               SAN.maxit = 500, 
+               SAN.nsteps = 1e8
+           )
+           )                         
+           )
+   saveRDS(fit_edges_indegree_outdegree, edges_indeg_outdeg_model_path)
+   message("Saved fit_edges_indegree_outdegree to file.")
+ }
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
     edges   idegree0   idegree1   odegree0   odegree1   odegree2   odegree3 
-8.2765014  6.1210698  2.9635770  0.9494553 -0.7861526 -1.2286635 -1.1264113 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
      edges    idegree0    idegree1    odegree0    odegree1    odegree2 
-8.45833215  5.12647561  2.28068511  1.42415535 -0.02275352 -0.49192421 
   odegree3 
-0.57528650 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
Saved fit_edges_indegree_outdegree to file.
> 
> if (file.exists(sim_edges_indeg_outdeg_path)) {
+   net_fit_edges_indeg_outdeg <- readRDS(sim_edges_indeg_outdeg_path)
+   message("Loaded simulated network net_fit_edges_indeg_outdeg from file.")
+ } else {
+   net_fit_edges_indeg_outdeg <- simulate(fit_edges_indegree_outdegree, nsim = 1)
+   saveRDS(net_fit_edges_indeg_outdeg, sim_edges_indeg_outdeg_path)
+   message("Saved simulated network net_fit_edges_indeg_outdeg to file.")
+ }
Saved simulated network net_fit_edges_indeg_outdeg to file.
> 
> 
> 
> # Save RData ----------
> 
> save.image(file=here("fit-ergms", "out", "edges_indeg_first.RData"))  
> 
> proc.time()
    user   system  elapsed 
2062.978   17.098 2089.865 
