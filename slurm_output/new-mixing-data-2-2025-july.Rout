
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

- Project '/oscar/home/akhann16/code/net-ergm-v4plus' loaded. [renv 1.0.7]
> # Analyze synthetic dataset with 32K nodes
> 
> 
> # Fit ERGM with 5 dyadic independent terms
> 
> rm(list = ls())
> 
> # Label and outputs for this run
> run_label <- "new-mixing-data-2" # set manually to ensure intentional updates
> 
> # Activate R environment ----------
> 
> library(renv)

Attaching package: ‘renv’

The following objects are masked from ‘package:stats’:

    embed, update

The following objects are masked from ‘package:utils’:

    history, upgrade

The following objects are masked from ‘package:base’:

    autoload, load, remove, use

> renv::activate()
> 
> 
> # Libraries ----------
> 
> library(network)

‘network’ 1.18.2 (2023-12-04), part of the Statnet Project
* ‘news(package="network")’ for changes since last version
* ‘citation("network")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

> library(ergm)

‘ergm’ 4.6.0 (2023-12-17), part of the Statnet Project
* ‘news(package="ergm")’ for changes since last version
* ‘citation("ergm")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

‘ergm’ 4 is a major update that introduces some backwards-incompatible
changes. Please type ‘news(package="ergm")’ for a list of major
changes.

> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(ergm.userterms)
Loading required package: statnet.common

Attaching package: ‘statnet.common’

The following objects are masked from ‘package:base’:

    attr, order


‘ergm.userterms’ 3.1.1 (2020-02-01), part of the Statnet Project
* ‘news(package="ergm.userterms")’ for changes since last version
* ‘citation("ergm.userterms")’ for citation information
* ‘https://statnet.org’ for help, support, and other information

NOTE: If you use custom ERGM terms based on ‘ergm.userterms’ version
prior to 3.1, you will need to perform a one-time update of the package
boilerplate files (the files that you did not write or modify) from
‘ergm.userterms’ 3.1 or later. See help('eut-upgrade') for
instructions.

> library(here)
here() starts at /oscar/home/akhann16/code/net-ergm-v4plus
> library(styler)
> 
> 
> # Create output directory ---------
> out_dir <- here("fit-ergms", "out", run_label)
> if (!dir.exists(out_dir)) dir.create(out_dir, recursive = FALSE)
> 
> 
> # Load data objects ----------
> 
> data_objects <- readRDS(here("fit-ergms", "out", "processed_data.rds"))
> names(data_objects)
 [1] "data"                    "n0"                     
 [3] "edges_only_net"          "tgt.old.pctyoung"       
 [5] "tgt.young.pctold"        "tgt.young.pctyoung"     
 [7] "edges_target"            "tgt.female.pctmale"     
 [9] "tgt.male.pctfemale"      "tgt.male.pctmale"       
[11] "target_race_num"         "target_full_race_matrix"
[13] "indegree_data"           "outdegree_data"         
[15] "dist_nedge_distribution"
> 
> intersect(names(data_objects), ls())
character(0)
> list2env(data_objects, envir = globalenv())
<environment: R_GlobalEnv>
> ls()
 [1] "data"                    "data_objects"           
 [3] "dist_nedge_distribution" "edges_only_net"         
 [5] "edges_target"            "indegree_data"          
 [7] "n0"                      "out_dir"                
 [9] "outdegree_data"          "run_label"              
[11] "target_full_race_matrix" "target_race_num"        
[13] "tgt.female.pctmale"      "tgt.male.pctfemale"     
[15] "tgt.male.pctmale"        "tgt.old.pctyoung"       
[17] "tgt.young.pctold"        "tgt.young.pctyoung"     
> 
> inedges_target <- indegree_data$in_degree * indegree_data$mean_n
> sum(inedges_target)
[1] 20256.49
> 
> outedges_target <- outdegree_data$out_degree * outdegree_data$mean_n
> sum(outedges_target)
[1] 25663.36
> 
> # Degree and dist assignments ---------
> 
> ## outdegrees
> deg.terms <- 0:3
> deg.terms.0 <- 0
> deg.terms.0_1 <- 0:1
> deg.terms.0_2 <- 0:2
> deg.terms.013 <- c(0, 1, 3)
> 
> ## indegrees
> indeg.terms.0 <- 0
> indeg.terms <- 0:1
> 
> ## dist
> dist.terms <- 1:3 # fourth is left out
> 
> class(target_race_num)
[1] "numeric"
> target_race_num <- unname(target_race_num)
> 
> 
> # Helper function to only run fits that were not previously saved ----------
> 
> load_or_run <- function(name, expr) {
+   path <- file.path(out_dir, paste0(name, ".rds"))
+   if (file.exists(path)) {
+     message("Loading saved ", name)
+     readRDS(path)
+   } else {
+     message("Running and saving ", name)
+     obj <- eval(expr)
+     saveRDS(obj, path)
+     obj
+   }
+ }
> 
> 
> 
> # Fit Non-empty net including race term ---------
> sex_mixing_terms <- summary(n0 ~ nodemix("sex", levels2 = -1))
> print(names(sex_mixing_terms))
[1] "mix.sex.M.F" "mix.sex.F.M" "mix.sex.M.M"
> sex_mixing_align_order <- c(tgt.male.pctfemale, tgt.female.pctmale, tgt.male.pctmale)
> print(sex_mixing_align_order)
[1] 6061.420 6281.835 7576.775
> sum(sex_mixing_align_order)
[1] 19920.03
> 
> age_mixing_terms <- summary(n0 ~ nodemix("young", levels2 = -1))
> print(names(age_mixing_terms))
[1] "mix.young.1.0" "mix.young.0.1" "mix.young.1.1"
> age_mixing_align_order <- c(
+   tgt.young.pctold,   # 1 → 0
+   tgt.old.pctyoung,   # 0 → 1
+   tgt.young.pctyoung  # 1 → 1
+ )
> print(age_mixing_align_order)
[1] 1910.266 1928.634 1763.322
> sum(age_mixing_align_order)
[1] 5602.222
> 
> 
> race_mixing_terms <- summary(n0 ~ nodemix("race.num", levels2 = -1))
> print(names(race_mixing_terms))
 [1] "mix.race.num.2.1" "mix.race.num.3.1" "mix.race.num.4.1" "mix.race.num.1.2"
 [5] "mix.race.num.2.2" "mix.race.num.3.2" "mix.race.num.4.2" "mix.race.num.1.3"
 [9] "mix.race.num.2.3" "mix.race.num.3.3" "mix.race.num.4.3" "mix.race.num.1.4"
[13] "mix.race.num.2.4" "mix.race.num.3.4" "mix.race.num.4.4"
> # race order is already aligned
> print(target_race_num)
 [1] 4510.936465 4673.492734 8642.574969  376.083572 2045.729317   45.460651
 [7]  438.075369  433.253785  628.413147 2466.814342  788.443825   27.551910
[13]    7.576775    7.576775   36.506281
> sum(target_race_num)
[1] 25128.49
> 
> fit_nonempty_network_w_sex <-
+   load_or_run("fit_nonempty_network_w_sex", quote(
+     ergm(
+       edges_only_net ~
+         edges +
+         nodemix("sex", levels2 = -1),
+       target.stats =
+         c(
+           edges_target,
+           sex_mixing_align_order
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit_nonempty_network_w_sex
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
       edges  mix.sex.M.F  mix.sex.F.M  mix.sex.M.M 
-10.83414169   0.24088987   0.24951080   0.01140859 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
       edges  mix.sex.M.F  mix.sex.F.M  mix.sex.M.M 
-10.85631309   0.25230848   0.28750131   0.04065598 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> non_empty_net_w_sex <- load_or_run("non_empty_net_w_sex", quote(
+   simulate(fit_nonempty_network_w_sex, nsim = 1)
+ ))
Running and saving non_empty_net_w_sex
> non_empty_net_w_sex
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 22879 
    missing edges= 0 
    non-missing edges= 22879 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit_nonempty_network_w_sex_age <-
+   load_or_run("fit_nonempty_network_w_sex_age", quote(
+     ergm(
+       non_empty_net_w_sex ~
+         edges +
+         nodemix("sex", levels2 = -1)+
+         nodemix("young", levels2 = -1),
+       target.stats =
+         c(
+           edges_target,
+           sex_mixing_align_order,
+           age_mixing_align_order
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit_nonempty_network_w_sex_age
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
        edges   mix.sex.M.F   mix.sex.F.M   mix.sex.M.M mix.young.1.0 
 -10.59054176    0.26782329    0.28786401    0.02960002   -1.07590935 
mix.young.0.1 mix.young.1.1 
  -1.01114637    0.03311684 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
        edges   mix.sex.M.F   mix.sex.F.M   mix.sex.M.M mix.young.1.0 
 -10.57664813    0.25279821    0.28787836    0.03638772   -1.07511181 
mix.young.0.1 mix.young.1.1 
  -1.06451144   -0.02241782 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> non_empty_net_w_sex_age <- load_or_run("non_empty_net_w_sex_age", quote(
+   simulate(fit_nonempty_network_w_sex_age, nsim = 1)
+ ))
Running and saving non_empty_net_w_sex_age
> non_empty_net_w_sex_age
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 23311 
    missing edges= 0 
    non-missing edges= 23311 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> # fit_nonempty_network_w_race_num <-
> #   load_or_run("fit_nonempty_network_w_race_num", quote(
> #     ergm(
> #       edges_only_net ~
> #         edges +
> #         nodemix("sex", levels2 = -1) +
> #         nodemix("young", levels2 = -1) +
> #         nodemix("race.num", levels2 = -1),
> #       target.stats =
> #         c(
> #           edges_target,
> #           sex_mixing_align_order,
> #           age_mixing_align_order,
> #           target_race_num
> #         ),
> #       eval.loglik = FALSE,
> #       control = control.ergm(
> #         MCMLE.maxit = 500,
> #         main.method = c("Stochastic-Approximation"),
> #         MCMC.interval = 1e6,
> #         MCMC.samplesize = 1e6,
> #         MCMLE.termination = "Hotelling",
> #         MCMC.effectiveSize = NULL,
> #         SAN = control.san(
> #           SAN.maxit = 500,
> #           SAN.nsteps = 1e8
> #         )
> #       )
> #     )
> #   ))
> 
> # non_empty_net_w_race_term <- load_or_run("net_nonempty_w_race_term", quote(
> #   simulate(fit_nonempty_network_w_race_num, nsim = 1)
> # ))
> # non_empty_net_w_race_term
> 
> fit.stepwise.dist <-
+   load_or_run("fit.stepwise.dist", quote(
+     ergm(
+       #non_empty_net_w_race_term ~
+       non_empty_net_w_sex_age ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         #nodemix("race.num", levels2 = -1) +
+         # idegree(indeg.terms)+
+         # odegree(deg.terms)+
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           sex_mixing_align_order,
+           age_mixing_align_order,
+           #target_race_num,
+           # c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+           # c(outedges$n_nodes[c(deg.terms+1)])
+           c(dist_nedge_distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit.stepwise.dist
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
        edges   mix.sex.M.F   mix.sex.F.M   mix.sex.M.M mix.young.1.0 
-1.113502e+01  6.813272e-01  8.387132e-01  4.161132e-01 -9.369180e-01 
mix.young.0.1 mix.young.1.1         dist1         dist2         dist3 
-1.164054e+00  6.898254e-04  7.015854e+00  4.063829e+00 -9.129462e-01 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
        edges   mix.sex.M.F   mix.sex.F.M   mix.sex.M.M mix.young.1.0 
  -10.9176325     0.4324981     0.4710273     0.2173736    -0.9226516 
mix.young.0.1 mix.young.1.1         dist1         dist2         dist3 
   -0.9151206     0.1860421     7.1271572     3.8977638    -0.9339578 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> net_stepwise_dist <- load_or_run(
+   "net.stepwise.dist",
+   quote(simulate(fit.stepwise.dist, nsim = 1))
+ )
Running and saving net.stepwise.dist
> 
> net_stepwise_dist
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 23020 
    missing edges= 0 
    non-missing edges= 23020 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit.stepwise.dist.odeg.0 <-
+   load_or_run("fit.stepwise.dist.odeg.0", quote(
+     ergm(
+       net_stepwise_dist ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         # nodemix("race.num", levels2 = -1) +
+         # idegree(indeg.terms)+
+         odegree(deg.terms.0) +
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           sex_mixing_align_order,
+           age_mixing_align_order,
+           #target_race_num,
+           # c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+           c(outdegree_data$mean_n[c(deg.terms.0 + 1)]),
+           c(dist_nedge_distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit.stepwise.dist.odeg.0
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
        edges   mix.sex.M.F   mix.sex.F.M   mix.sex.M.M mix.young.1.0 
  -10.6081798     0.6398709     0.8760770     0.6376454    -0.8193804 
mix.young.0.1 mix.young.1.1      odegree0         dist1         dist2 
   -1.0209468     0.1872903     1.2622816     7.1446453     3.8680202 
        dist3 
   -1.0275672 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
        edges   mix.sex.M.F   mix.sex.F.M   mix.sex.M.M mix.young.1.0 
  -10.5806162     0.5586258     0.6029839     0.3584143    -0.7689020 
mix.young.0.1 mix.young.1.1      odegree0         dist1         dist2 
   -0.8867021     0.3383156     1.1009978     7.0154075     3.8037201 
        dist3 
   -0.9197693 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> net_fit_stepwise_dist_odeg0 <- load_or_run("net_fit_stepwise_dist_odeg0", quote(
+   simulate(fit.stepwise.dist.odeg.0, nsim = 1)
+ ))
Running and saving net_fit_stepwise_dist_odeg0
> net_fit_stepwise_dist_odeg0
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 22953 
    missing edges= 0 
    non-missing edges= 22953 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit.stepwise.dist.odeg.0.1 <-
+   load_or_run("fit.stepwise.dist.odeg.0.1", quote(
+     ergm(
+       net_fit_stepwise_dist_odeg0 ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         #nodemix("race.num", levels2 = -1) +
+         # idegree(indeg.terms)+
+         odegree(deg.terms.0_1) +
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           sex_mixing_align_order,
+           age_mixing_align_order,
+           #target_race_num,
+           # c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+           c(outdegree_data$mean_n[c(deg.terms.0_1 + 1)]),
+           c(dist_nedge_distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit.stepwise.dist.odeg.0.1
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
        edges   mix.sex.M.F   mix.sex.F.M   mix.sex.M.M mix.young.1.0 
-10.256281193   0.380069421   0.215895397   0.229947676  -0.913121557 
mix.young.0.1 mix.young.1.1      odegree0      odegree1         dist1 
 -1.095113527   0.135102220   1.116264826  -0.002654724   7.395866058 
        dist2         dist3 
  3.637653857  -0.997281070 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
        edges   mix.sex.M.F   mix.sex.F.M   mix.sex.M.M mix.young.1.0 
  -10.3297170     0.3543007     0.3849984     0.1450742    -0.7766403 
mix.young.0.1 mix.young.1.1      odegree0      odegree1         dist1 
   -0.9080900     0.3473501     1.2987298     0.1366043     7.1207470 
        dist2         dist3 
    3.7850869    -0.9155209 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> net_fit_stepwise_dist_odeg0_1 <- 
+ load_or_run("net_fit_stepwise_dist_odeg0_1", quote(
+   simulate(fit.stepwise.dist.odeg.0.1, nsim = 1)
+ ))
Running and saving net_fit_stepwise_dist_odeg0_1
> net_fit_stepwise_dist_odeg0_1
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 23347 
    missing edges= 0 
    non-missing edges= 23347 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit.stepwise.dist.odeg.0.2 <-
+   load_or_run("fit.stepwise.dist.odeg.0.2", quote(
+     ergm(
+       net_fit_stepwise_dist_odeg0_1 ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         #nodemix("race.num", levels2 = -1) +
+         # idegree(indeg.terms)+
+         odegree(deg.terms.0_2) +
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           sex_mixing_align_order,
+           age_mixing_align_order,
+           #target_race_num,
+           # c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+           c(outdegree_data$mean_n[c(deg.terms.0_2 + 1)]),
+           c(dist_nedge_distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit.stepwise.dist.odeg.0.2
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
        edges   mix.sex.M.F   mix.sex.F.M   mix.sex.M.M mix.young.1.0 
 -10.65863863    0.53696891    0.25190383   -0.09850324   -0.82737799 
mix.young.0.1 mix.young.1.1      odegree0      odegree1      odegree2 
  -0.67193938    0.52751475   -0.10947570   -0.93966957   -0.92798949 
        dist1         dist2         dist3 
   6.94506586    3.69246611   -0.91872119 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
        edges   mix.sex.M.F   mix.sex.F.M   mix.sex.M.M mix.young.1.0 
  -10.7124858     0.4211092     0.4464929     0.2108711    -0.7866347 
mix.young.0.1 mix.young.1.1      odegree0      odegree1      odegree2 
   -0.9129707     0.3335080    -0.2037880    -0.9892709    -0.8945158 
        dist1         dist2         dist3 
    6.9624561     3.7378271    -0.9759401 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> net_fit_stepwise_dist_odeg0_2 <- 
+ load_or_run("net_fit_stepwise_dist_odeg0_2", quote(
+   simulate(fit.stepwise.dist.odeg.0.2, nsim = 1)
+ ))
Running and saving net_fit_stepwise_dist_odeg0_2
> net_fit_stepwise_dist_odeg0_2 #this is degenerate
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 22870 
    missing edges= 0 
    non-missing edges= 22870 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> fit.stepwise.dist.odeg.013 <-
+   load_or_run("fit.stepwise.dist.odeg.0.2", quote(
+     ergm(
+       net_fit_stepwise_dist_odeg0_1 ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         #nodemix("race.num", levels2 = -1) +
+         # idegree(indeg.terms)+
+         odegree(deg.terms.013) +
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           sex_mixing_align_order,
+           age_mixing_align_order,
+           #target_race_num,
+           # c(negbin_inedges$n_nodes[c(indeg.terms+1)]),
+           c(outdegree_data$mean_n[c(deg.terms.013 + 1)]),
+           c(dist_nedge_distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Loading saved fit.stepwise.dist.odeg.0.2
> 
> # net_fit_stepwise_dist_odeg013 <- 
> # load_or_run("net_fit_stepwise_dist_odeg013", quote(
> #   simulate(fit.stepwise.dist.odeg.013, nsim = 1)
> # ))
> # net_fit_stepwise_dist_odeg013 #this is degenerate
> 
> 
> fit.stepwise.dist.odeg.01.indeg0 <-
+   load_or_run("fit.stepwise.dist.odeg.01.indeg0", quote(
+     ergm(
+       net_fit_stepwise_dist_odeg0_1 ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         #nodemix("race.num", levels2 = -1) +
+         idegree(indeg.terms.0)+
+         odegree(deg.terms.0_1) +
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           sex_mixing_align_order,
+           age_mixing_align_order,
+           #target_race_num,
+           c(indegree_data$mean_n[c(indeg.terms.0 + 1)]),
+           c(outdegree_data$mean_n[c(deg.terms.0_1 + 1)]),
+           c(dist_nedge_distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit.stepwise.dist.odeg.01.indeg0
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
        edges   mix.sex.M.F   mix.sex.F.M   mix.sex.M.M mix.young.1.0 
   -9.4622094     0.4421999     0.3530038     0.1954526    -0.9475214 
mix.young.0.1 mix.young.1.1      idegree0      odegree0      odegree1 
   -0.8506400     0.5457363     1.8936956     1.1910624     0.0631761 
        dist1         dist2         dist3 
    7.2958641     3.3933250    -1.0715987 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
        edges   mix.sex.M.F   mix.sex.F.M   mix.sex.M.M mix.young.1.0 
  -9.49982066    0.30233814    0.30714229    0.09869105   -0.84006118 
mix.young.0.1 mix.young.1.1      idegree0      odegree0      odegree1 
  -0.76745621    0.50309269    1.79378113    1.26542002    0.21313628 
        dist1         dist2         dist3 
   7.09888449    3.38032160   -0.96636456 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> net_fit_stepwise_dist_odeg01_indeg0 <- 
+ load_or_run("net_fit_stepwise_dist_odeg01_indeg0", quote(
+   simulate(fit.stepwise.dist.odeg.01.indeg0, nsim = 1)
+ ))
Running and saving net_fit_stepwise_dist_odeg01_indeg0
> net_fit_stepwise_dist_odeg01_indeg0 
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 26200 
    missing edges= 0 
    non-missing edges= 26200 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> ###
> 
> fit.stepwise.dist.odeg.01.indeg <-
+   load_or_run("fit.stepwise.dist.odeg.01.indeg", quote(
+     ergm(
+       net_fit_stepwise_dist_odeg0_1 ~
+         edges +
+         nodemix("sex", levels2 = -1) +
+         nodemix("young", levels2 = -1) +
+         #nodemix("race.num", levels2 = -1) +
+         idegree(indeg.terms)+
+         odegree(deg.terms.0_1) +
+         dist(dist.terms),
+       target.stats =
+         c(
+           edges_target,
+           sex_mixing_align_order,
+           age_mixing_align_order,
+           #target_race_num,
+           c(indegree_data$mean_n[c(indeg.terms + 1)]),
+           c(outdegree_data$mean_n[c(deg.terms.0_1 + 1)]),
+           c(dist_nedge_distribution[dist.terms])
+         ),
+       eval.loglik = FALSE,
+       control = control.ergm(
+         MCMLE.maxit = 500,
+         main.method = c("Stochastic-Approximation"),
+         MCMC.interval = 1e6,
+         MCMC.samplesize = 1e6,
+         MCMLE.termination = "Hotelling",
+         MCMC.effectiveSize = NULL,
+         SAN = control.san(
+           SAN.maxit = 500,
+           SAN.nsteps = 1e8
+         )
+       )
+     )
+   ))
Running and saving fit.stepwise.dist.odeg.01.indeg
Unable to match target stats. Using MCMLE estimation.
Starting maximum pseudolikelihood estimation (MPLE):
Obtaining the responsible dyads.
Evaluating the predictor and response matrix.
Maximizing the pseudolikelihood.
Finished MPLE.
Stochastic approximation algorithm with theta_0 equal to:
        edges   mix.sex.M.F   mix.sex.F.M   mix.sex.M.M mix.young.1.0 
  -8.95211930    0.07582717    0.08219081   -0.04003607   -0.85503219 
mix.young.0.1 mix.young.1.1      idegree0      idegree1      odegree0 
  -0.65283814    0.60987747    3.38254741    1.52861220    1.17385048 
     odegree1         dist1         dist2         dist3 
   0.14301428    6.55020660    3.52771577   -0.91873013 
Starting burnin of 16000000 steps
Phase 1: 200 steps (interval = 1000000)
Stochastic Approximation estimate:
        edges   mix.sex.M.F   mix.sex.F.M   mix.sex.M.M mix.young.1.0 
  -9.04445144    0.23399674    0.26856705    0.06385658   -0.84357617 
mix.young.0.1 mix.young.1.1      idegree0      idegree1      odegree0 
  -0.72232463    0.49920901    3.15042143    1.41225356    1.05026378 
     odegree1         dist1         dist2         dist3 
   0.05384376    6.46476711    3.30796464   -1.06549886 
Phase 3:  1000 iterations (interval=1e+06)
This model was fit using MCMC.  To examine model diagnostics and check
for degeneracy, use the mcmc.diagnostics() function.
> 
> net_fit_stepwise_dist_odeg01_indeg <- 
+ load_or_run("net_fit_stepwise_dist_odeg01_indeg", quote(
+   simulate(fit.stepwise.dist.odeg.01.indeg0, nsim = 1)
+ ))
Running and saving net_fit_stepwise_dist_odeg01_indeg
> net_fit_stepwise_dist_odeg01_indeg0 
 Network attributes:
  vertices = 32002 
  directed = TRUE 
  hyper = FALSE 
  loops = FALSE 
  multiple = FALSE 
  bipartite = FALSE 
  total edges= 26200 
    missing edges= 0 
    non-missing edges= 26200 

 Vertex attribute names: 
    age age_lb age_started age_ub agecat daily_injection_intensity fraction_recept_sharing hcv_status lat lon race race.num sex syringe_source vertex.names young Zip zipcode 

 Edge attribute names not shown 
> 
> ## save.image(file=here("fit-ergms", "out", "stepwise-refactored-std-order-2025-jan23-targets.RData"))
> save.image(file = file.path(out_dir, paste0(run_label, ".RData")))
> 
> proc.time()
    user   system  elapsed 
4926.751  129.923 5082.376 
